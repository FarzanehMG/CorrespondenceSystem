{
  "version": 3,
  "sources": ["../../../../../Modules/LetterDB/Letter/LetterPage.ts", "../../../../../Modules/ServerTypes/LetterDB/LetterColumns.ts", "../../../../../Modules/ServerTypes/Modules/Enums.Letter.States.ts", "../../../../../Modules/LetterAttachmentDB/LetterAttachment/LetterAttachmentEditor.ts", "../../../../../Modules/SignLettersDB/SignLetters/SignLettersEditor.ts", "../../../../../Modules/ServerTypes/LetterDB/LetterForm.ts", "../../../../../Modules/ServerTypes/Modules/Enums.Letter.ConfidentialLevels.ts", "../../../../../Modules/ServerTypes/Modules/Enums.Letter.LetterTypes.ts", "../../../../../Modules/ServerTypes/Modules/Enums.Letter.PriorityStates.ts", "../../../../../Modules/ServerTypes/LetterDB/LetterRow.ts", "../../../../../Modules/ServerTypes/LetterDB/LetterService.ts", "../../../../../Modules/LetterDB/Letter/LetterGrid.ts", "../../../../../Modules/LetterDB/Letter/LetterDialog.ts"],
  "sourcesContent": ["\uFEFFimport { initFullHeightGridPage } from '@serenity-is/corelib';\r\nimport { LetterGrid } from './LetterGrid';\r\n\r\nexport default function pageInit() {\r\n    initFullHeightGridPage(new LetterGrid($('#GridDiv')).element);\r\n}", "\uFEFFimport { ColumnsBase, fieldsProxy } from \"@serenity-is/corelib\";\r\nimport { Column } from \"@serenity-is/sleekgrid\";\r\nimport { States } from \"../Modules/Enums.Letter.States\";\r\nimport { LetterRow } from \"./LetterRow\";\r\n\r\nexport interface LetterColumns {\r\n    Title: Column<LetterRow>;\r\n    GrandSubjectTitle: Column<LetterRow>;\r\n    LetterNo: Column<LetterRow>;\r\n    State: Column<LetterRow>;\r\n    LetterType: Column<LetterRow>;\r\n}\r\n\r\nexport class LetterColumns extends ColumnsBase<LetterRow> {\r\n    static readonly columnsKey = 'LetterDB.Letter';\r\n    static readonly Fields = fieldsProxy<LetterColumns>();\r\n}\r\n\r\n[States]; // referenced types", "\uFEFFimport { Decorators } from \"@serenity-is/corelib\";\r\n\r\nexport enum States {\r\n    Draft = 0,\r\n    Posted = 1,\r\n    Received = 2\r\n}\r\nDecorators.registerEnumType(States, 'CorrespondenceSystem.Modules.Enums.Letter.States', 'State');", "import { LetterAttachmentColumns, LetterAttachmentRow } from \"@/ServerTypes/LetterAttachmentDB\";\r\nimport { Decorators, alertDialog, toId } from \"@serenity-is/corelib\";\r\nimport { GridEditorBase } from \"@serenity-is/extensions\";\r\nimport { LetterAttachmentDialog } from \"./LetterAttachmentDialog\";\r\n\r\n@Decorators.registerEditor('CorrespondenceSystem.LetterAttachmentDB.LetterAttachmentEditor')\r\nexport class LetterAttachmentEditor<P = {}> extends GridEditorBase<LetterAttachmentRow, P> {\r\n    protected getColumnsKey() { return LetterAttachmentColumns.columnsKey; }\r\n    protected getDialogType() { return LetterAttachmentDialog; }\r\n    protected getLocalTextPrefix() { return LetterAttachmentRow.localTextPrefix; }\r\n\r\n//    validateEntity(row, id) {\r\n//        row.ProductID = toId(row.ProductID);\r\n\r\n//        var sameProduct = this.view.getItems().find(x => x.ProductID === row.ProductID);\r\n//        if (sameProduct && this.id(sameProduct) !== id) {\r\n//            alertDialog('This product is already in order details!');\r\n//            return false;\r\n//        }\r\n\r\n//        id ??= row[this.getIdProperty()];\r\n\r\n//        ProductRow.getLookupAsync().then(lookup => {\r\n//            var item = this.view?.getItemById?.(id);\r\n//            if (item) {\r\n//                item.ProductName = lookup.itemById[row.ProductID].ProductName;\r\n//                this.view.updateItem(id, item);\r\n//            }\r\n//        });\r\n\r\n//        row.LineTotal = (row.Quantity || 0) * (row.UnitPrice || 0) - (row.Discount || 0);\r\n//        return true;\r\n//    }\r\n}", "import { Decorators, alertDialog, toId, tryFirst, serviceCall, resolveUrl, EditorUtils } from \"@serenity-is/corelib\";\r\nimport { GridEditorBase, } from \"@serenity-is/extensions\";\r\nimport { LetterDialog } from \"../../LetterDB/Letter/LetterDialog\";\r\nimport { SignLettersColumns, SignLettersRow } from \"../../ServerTypes/SignLettersDB\";\r\nimport { SignLettersDialog } from \"./SignLettersDialog\";\r\n\r\n@Decorators.registerEditor('CorrespondenceSystem.SignLettersDB.SignLettersEditor')\r\n\r\n\r\nexport class SignLettersEditor<P = {}> extends GridEditorBase<SignLettersRow, P> {\r\n    protected getColumnsKey() { return SignLettersColumns.columnsKey; }\r\n    protected getDialogType() { return SignLettersDialog; }\r\n    protected getLocalTextPrefix() { return SignLettersRow.localTextPrefix; }\r\n\r\n\r\n    AddSign() {\r\n        serviceCall(\r\n            {\r\n                url: resolveUrl(\"~/Services/SignLettersDB/SignLetters/AddSignLetter\"),\r\n                onSuccess: (response: any) => {\r\n                    var items = this.view.getItems()\r\n\r\n                    const newItem: SignLettersRow  = {\r\n                        SignTitle: response['Title'],\r\n                        SignId: response['Id'],\r\n                        CreatedDate: response['CreatedDate']\r\n                    };\r\n\r\n                    var id = this.id(newItem)\r\n                    if (id == null) {\r\n                        (newItem as any)[this.getIdProperty()] = this.getNextId()\r\n                    }\r\n\r\n                    items.push(newItem);\r\n                    this.setEntities(items);\r\n\r\n                },\r\n                method : 'post'\r\n            }\r\n        );\r\n    }\r\n\r\n\r\n\r\n    getButtons() {\r\n        var buttons = super.getButtons();\r\n        var addButton = tryFirst(buttons, x => x.cssClass == 'add-button');\r\n\r\n        // Check if the button is found\r\n        if (addButton) {\r\n            // Disable the button after the first click\r\n            let isButtonClickable = true;\r\n\r\n            addButton.onClick = (e) => {\r\n                if (isButtonClickable) {\r\n                    // Call your AddSign method\r\n                    this.AddSign();\r\n\r\n                    // Disable the button\r\n                    isButtonClickable = false;\r\n\r\n                    // Optionally, you can update the button appearance or do other actions\r\n                    addButton.disabled = true;\r\n                }\r\n            };\r\n        }\r\n\r\n        return buttons;\r\n    }\r\n\r\n\r\n    //getButtons(){\r\n    //    var s = super.getButtons();\r\n    //    var btn = tryFirst(s, x => x.cssClass == 'add-button');\r\n    //    btn.onClick = null;\r\n    //    btn.onClick = e => this.AddSign()\r\n    //    return s;\r\n    //}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n}", "\uFEFFimport { LetterAttachmentEditor } from \"@/LetterAttachmentDB/LetterAttachment/LetterAttachmentEditor\";\r\nimport { SignLettersEditor } from \"@/SignLettersDB/SignLetters/SignLettersEditor\";\r\nimport { RadioButtonEditor, StringEditor, EnumEditor, ServiceLookupEditor, BooleanEditor, LookupEditor, TextAreaEditor, PrefixedContext, initFormType } from \"@serenity-is/corelib\";\r\nimport { ConfidentialLevels } from \"../Modules/Enums.Letter.ConfidentialLevels\";\r\nimport { LetterTypes } from \"../Modules/Enums.Letter.LetterTypes\";\r\nimport { PriorityStates } from \"../Modules/Enums.Letter.PriorityStates\";\r\nimport { States } from \"../Modules/Enums.Letter.States\";\r\n\r\nexport interface LetterForm {\r\n    LetterType: RadioButtonEditor;\r\n    Title: StringEditor;\r\n    LetterIdentifier: StringEditor;\r\n    LetterIdentifierGen: StringEditor;\r\n    LetterNo: StringEditor;\r\n    PriorityState: RadioButtonEditor;\r\n    ConfidentialLevel: RadioButtonEditor;\r\n    State: EnumEditor;\r\n    SenderId: ServiceLookupEditor;\r\n    ReceiverId: ServiceLookupEditor;\r\n    GrandSubjectId: ServiceLookupEditor;\r\n    UseDefaultTemplate: BooleanEditor;\r\n    TemplateId: LookupEditor;\r\n    LetterContent: TextAreaEditor;\r\n    Tag: StringEditor;\r\n    LetterCarrier: StringEditor;\r\n    HasAttachment: BooleanEditor;\r\n    NeedAnswer: BooleanEditor;\r\n    DetailList: LetterAttachmentEditor;\r\n    SignLettersDetailList: SignLettersEditor;\r\n}\r\n\r\nexport class LetterForm extends PrefixedContext {\r\n    static readonly formKey = 'LetterDB.Letter';\r\n    private static init: boolean;\r\n\r\n    constructor(prefix: string) {\r\n        super(prefix);\r\n\r\n        if (!LetterForm.init)  {\r\n            LetterForm.init = true;\r\n\r\n            var w0 = RadioButtonEditor;\r\n            var w1 = StringEditor;\r\n            var w2 = EnumEditor;\r\n            var w3 = ServiceLookupEditor;\r\n            var w4 = BooleanEditor;\r\n            var w5 = LookupEditor;\r\n            var w6 = TextAreaEditor;\r\n            var w7 = LetterAttachmentEditor;\r\n            var w8 = SignLettersEditor;\r\n\r\n            initFormType(LetterForm, [\r\n                'LetterType', w0,\r\n                'Title', w1,\r\n                'LetterIdentifier', w1,\r\n                'LetterIdentifierGen', w1,\r\n                'LetterNo', w1,\r\n                'PriorityState', w0,\r\n                'ConfidentialLevel', w0,\r\n                'State', w2,\r\n                'SenderId', w3,\r\n                'ReceiverId', w3,\r\n                'GrandSubjectId', w3,\r\n                'UseDefaultTemplate', w4,\r\n                'TemplateId', w5,\r\n                'LetterContent', w6,\r\n                'Tag', w1,\r\n                'LetterCarrier', w1,\r\n                'HasAttachment', w4,\r\n                'NeedAnswer', w4,\r\n                'DetailList', w7,\r\n                'SignLettersDetailList', w8\r\n            ]);\r\n        }\r\n    }\r\n}\r\n\r\n[LetterTypes, PriorityStates, ConfidentialLevels, States]; // referenced types", "\uFEFFimport { Decorators } from \"@serenity-is/corelib\";\r\n\r\nexport enum ConfidentialLevels {\r\n    Normal = 0,\r\n    Secret = 1\r\n}\r\nDecorators.registerEnumType(ConfidentialLevels, 'CorrespondenceSystem.Modules.Enums.Letter.ConfidentialLevels', 'ConfidentialLevels');", "\uFEFFimport { Decorators } from \"@serenity-is/corelib\";\r\n\r\nexport enum LetterTypes {\r\n    Outgoing = 0,\r\n    Incoming = 1\r\n}\r\nDecorators.registerEnumType(LetterTypes, 'CorrespondenceSystem.Modules.Enums.Letter.LetterTypes', 'LetterTypes');", "\uFEFFimport { Decorators } from \"@serenity-is/corelib\";\r\n\r\nexport enum PriorityStates {\r\n    Urgent = 0,\r\n    Instant = 1,\r\n    Normal = 2\r\n}\r\nDecorators.registerEnumType(PriorityStates, 'CorrespondenceSystem.Modules.Enums.Letter.PriorityStates', 'PriorityState');", "\uFEFFimport { fieldsProxy } from \"@serenity-is/corelib\";\r\nimport { LetterAttachmentRow } from \"../LetterAttachmentDB/LetterAttachmentRow\";\r\nimport { SignLettersRow } from \"../SignLettersDB/SignLettersRow\";\r\n\r\nexport interface LetterRow {\r\n    Id?: string;\r\n    UseDefaultTemplate?: boolean;\r\n    TemplateId?: string;\r\n    SenderId?: string;\r\n    ReceiverId?: string;\r\n    GrandSubjectId?: string;\r\n    LetterIdentifier?: string;\r\n    LetterIdentifierGen?: string;\r\n    LetterNo?: string;\r\n    Title?: string;\r\n    LetterContent?: string;\r\n    Tag?: string;\r\n    LetterType?: number;\r\n    State?: number;\r\n    PriorityState?: number;\r\n    ConfidentialLevel?: number;\r\n    HasAttachment?: boolean;\r\n    CreatedDate?: string;\r\n    CreatorUserName?: string;\r\n    ModifiedDate?: string;\r\n    ModifiedUserName?: string;\r\n    LetterCarrier?: string;\r\n    NeedAnswer?: boolean;\r\n    LetterFile?: string;\r\n    TemplateTitle?: string;\r\n    SenderName?: string;\r\n    ReceiverName?: string;\r\n    GrandSubjectTitle?: string;\r\n    DetailList?: LetterAttachmentRow[];\r\n    SignLettersDetailList?: SignLettersRow[];\r\n}\r\n\r\nexport abstract class LetterRow {\r\n    static readonly idProperty = 'Id';\r\n    static readonly nameProperty = 'LetterIdentifier';\r\n    static readonly localTextPrefix = 'LetterDB.Letter';\r\n    static readonly deletePermission = 'Administration:General';\r\n    static readonly insertPermission = 'Administration:General';\r\n    static readonly readPermission = 'Administration:General';\r\n    static readonly updatePermission = 'Administration:General';\r\n\r\n    static readonly Fields = fieldsProxy<LetterRow>();\r\n}", "\uFEFFimport { SaveRequest, SaveResponse, ServiceOptions, DeleteRequest, DeleteResponse, RetrieveRequest, RetrieveResponse, ListRequest, ListResponse, ServiceRequest, serviceRequest } from \"@serenity-is/corelib\";\nimport { LetterRow } from \"./LetterRow\";\n\nexport namespace LetterService {\n    export const baseUrl = 'LetterDB/Letter';\n\n    export declare function Create(request: SaveRequest<LetterRow>, onSuccess?: (response: SaveResponse) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function Update(request: SaveRequest<LetterRow>, onSuccess?: (response: SaveResponse) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function Delete(request: DeleteRequest, onSuccess?: (response: DeleteResponse) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function Retrieve(request: RetrieveRequest, onSuccess?: (response: RetrieveResponse<LetterRow>) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function List(request: ListRequest, onSuccess?: (response: ListResponse<LetterRow>) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function SetDefaultRecriverSender(request: ServiceRequest, onSuccess?: (response: string) => void, opt?: ServiceOptions<any>): JQueryXHR;\n\n    export const Methods = {\n        Create: \"LetterDB/Letter/Create\",\n        Update: \"LetterDB/Letter/Update\",\n        Delete: \"LetterDB/Letter/Delete\",\n        Retrieve: \"LetterDB/Letter/Retrieve\",\n        List: \"LetterDB/Letter/List\",\n        SetDefaultRecriverSender: \"LetterDB/Letter/SetDefaultRecriverSender\"\n    } as const;\n\n    [\n        'Create', \n        'Update', \n        'Delete', \n        'Retrieve', \n        'List', \n        'SetDefaultRecriverSender'\n    ].forEach(x => {\n        (<any>LetterService)[x] = function (r, s, o) {\n            return serviceRequest(baseUrl + '/' + x, r, s, o);\n        };\n    });\n}", "\uFEFFimport { LetterColumns, LetterRow, LetterService } from '@/ServerTypes/LetterDB';\r\nimport { Decorators, EntityGrid } from '@serenity-is/corelib';\r\nimport { LetterDialog } from './LetterDialog';\r\n\r\n@Decorators.registerClass('CorrespondenceSystem.LetterDB.LetterGrid')\r\nexport class LetterGrid extends EntityGrid<LetterRow, any> {\r\n    protected getColumnsKey() { return LetterColumns.columnsKey; }\r\n    protected getDialogType() { return LetterDialog; }\r\n    protected getRowDefinition() { return LetterRow; }\r\n    protected getService() { return LetterService.baseUrl; }\r\n\r\n    constructor(container: JQuery) {\r\n        super(container);\r\n    }\r\n}", "import { LetterForm, LetterRow, LetterService } from '@/ServerTypes/LetterDB';\r\nimport { Decorators, EntityDialog, resolveUrl, serviceCall, EditorUtils } from '@serenity-is/corelib';\r\nimport { LetterTypes } from '../../ServerTypes/Modules';\r\n\r\n@Decorators.registerClass('CorrespondenceSystem.LetterDB.LetterDialog')\r\nexport class LetterDialog extends EntityDialog<LetterRow, any> {\r\n    protected getFormKey() { return LetterForm.formKey; }\r\n    protected getRowDefinition() { return LetterRow; }\r\n    protected getService() { return LetterService.baseUrl; }\r\n\r\n    protected form = new LetterForm(this.idPrefix);\r\n\n    //constructor(container: JQuery) {\r\n    //    super(container);\r\n    //    this.SetDefaultSender()\r\n    //}\n\n\n    afterLoadEntity() {\r\n        this.SetRecriverSender()\r\n    }\r\n\r\n    SetRecriverSender() {\r\n        serviceCall({\r\n            url: resolveUrl(\"~/Services/LetterDB/Letter/SetDefaultRecriverSender\"),\r\n            onSuccess: (response: any) => {\r\n                if (response) {\n                    this.form.LetterType.changeSelect2(e => {\r\n                        if (this.form.LetterType.value == LetterTypes.Incoming.toString()) {\n\r\n                            EditorUtils.setValue(this.form.ReceiverId, response);\r\n                            EditorUtils.setValue(this.form.SenderId, null);\r\n                        }\r\n\r\n                        if (this.form.LetterType.value == LetterTypes.Outgoing.toString()) {\r\n                            var id = this.SetRecriverSender();\n\r\n                            EditorUtils.setValue(this.form.SenderId, response);\r\n                            EditorUtils.setValue(this.form.ReceiverId, null);\r\n                        }\r\n                    });\n\r\n                } else {\r\n                    console.error('Invalid response format for SetDefaultRecriverSender');\r\n                }\r\n            },\r\n            method: 'post'\r\n        });\r\n    }\r\n\n\n    \r\n}"],
  "mappings": "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",
  "names": ["import_corelib", "import_corelib", "import_corelib", "States", "_LetterColumns", "__name", "LetterColumns", "import_corelib", "import_extensions", "LetterAttachmentEditor", "LetterAttachmentColumns", "LetterAttachmentDialog", "LetterAttachmentRow", "__name", "__decorateClass", "import_corelib", "import_extensions", "SignLettersEditor", "SignLettersColumns", "SignLettersDialog", "SignLettersRow", "response", "items", "newItem", "id", "buttons", "addButton", "x", "isButtonClickable", "e", "__name", "__decorateClass", "import_corelib", "import_corelib", "ConfidentialLevels", "import_corelib", "LetterTypes", "import_corelib", "PriorityStates", "_LetterForm", "prefix", "w0", "w1", "w2", "w3", "w4", "w5", "w6", "w7", "LetterAttachmentEditor", "w8", "SignLettersEditor", "__name", "LetterForm", "import_corelib", "_LetterRow", "__name", "LetterRow", "import_corelib", "LetterService", "x", "r", "s", "o", "import_corelib", "import_corelib", "LetterDialog", "LetterForm", "LetterRow", "LetterService", "response", "id", "__name", "__decorateClass", "LetterGrid", "LetterColumns", "LetterDialog", "LetterRow", "LetterService", "container", "__name", "__decorateClass", "pageInit", "LetterGrid", "__name"]
}
