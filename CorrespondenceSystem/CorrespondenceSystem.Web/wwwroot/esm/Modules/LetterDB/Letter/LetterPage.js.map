{
  "version": 3,
  "sources": ["../../../../../Modules/LetterDB/Letter/LetterPage.ts", "../../../../../Modules/ServerTypes/LetterDB/LetterColumns.ts", "../../../../../Modules/ServerTypes/Modules/Enums.Letter.States.ts", "../../../../../Modules/LetterAttachmentDB/LetterAttachment/LetterAttachmentEditor.ts", "../../../../../Modules/SignLettersDB/SignLetters/SignLettersEditor.ts", "../../../../../Modules/ServerTypes/LetterDB/LetterForm.ts", "../../../../../Modules/ServerTypes/Modules/Enums.Letter.ConfidentialLevels.ts", "../../../../../Modules/ServerTypes/Modules/Enums.Letter.LetterTypes.ts", "../../../../../Modules/ServerTypes/Modules/Enums.Letter.PriorityStates.ts", "../../../../../Modules/ServerTypes/LetterDB/LetterRow.ts", "../../../../../Modules/ServerTypes/LetterDB/LetterService.ts", "../../../../../Modules/LetterDB/Letter/LetterGrid.ts", "../../../../../Modules/LetterDB/Letter/LetterDialog.ts"],
  "sourcesContent": ["\uFEFFimport { initFullHeightGridPage } from '@serenity-is/corelib';\r\nimport { LetterGrid } from './LetterGrid';\r\n\r\nexport default function pageInit() {\r\n    initFullHeightGridPage(new LetterGrid($('#GridDiv')).element);\r\n}", "\uFEFFimport { ColumnsBase, fieldsProxy } from \"@serenity-is/corelib\";\r\nimport { Column } from \"@serenity-is/sleekgrid\";\r\nimport { States } from \"../Modules/Enums.Letter.States\";\r\nimport { LetterRow } from \"./LetterRow\";\r\n\r\nexport interface LetterColumns {\r\n    Title: Column<LetterRow>;\r\n    GrandSubjectTitle: Column<LetterRow>;\r\n    LetterNo: Column<LetterRow>;\r\n    State: Column<LetterRow>;\r\n    LetterType: Column<LetterRow>;\r\n}\r\n\r\nexport class LetterColumns extends ColumnsBase<LetterRow> {\r\n    static readonly columnsKey = 'LetterDB.Letter';\r\n    static readonly Fields = fieldsProxy<LetterColumns>();\r\n}\r\n\r\n[States]; // referenced types", "\uFEFFimport { Decorators } from \"@serenity-is/corelib\";\r\n\r\nexport enum States {\r\n    Draft = 0,\r\n    Posted = 1,\r\n    Received = 2\r\n}\r\nDecorators.registerEnumType(States, 'CorrespondenceSystem.Modules.Enums.Letter.States', 'State');", "import { LetterAttachmentColumns, LetterAttachmentRow } from \"@/ServerTypes/LetterAttachmentDB\";\r\nimport { Decorators, alertDialog, toId } from \"@serenity-is/corelib\";\r\nimport { GridEditorBase } from \"@serenity-is/extensions\";\r\nimport { LetterAttachmentDialog } from \"./LetterAttachmentDialog\";\r\n\r\n@Decorators.registerEditor('CorrespondenceSystem.LetterAttachmentDB.LetterAttachmentEditor')\r\nexport class LetterAttachmentEditor<P = {}> extends GridEditorBase<LetterAttachmentRow, P> {\r\n    protected getColumnsKey() { return LetterAttachmentColumns.columnsKey; }\r\n    protected getDialogType() { return LetterAttachmentDialog; }\r\n    protected getLocalTextPrefix() { return LetterAttachmentRow.localTextPrefix; }\r\n\r\n//    validateEntity(row, id) {\r\n//        row.ProductID = toId(row.ProductID);\r\n\r\n//        var sameProduct = this.view.getItems().find(x => x.ProductID === row.ProductID);\r\n//        if (sameProduct && this.id(sameProduct) !== id) {\r\n//            alertDialog('This product is already in order details!');\r\n//            return false;\r\n//        }\r\n\r\n//        id ??= row[this.getIdProperty()];\r\n\r\n//        ProductRow.getLookupAsync().then(lookup => {\r\n//            var item = this.view?.getItemById?.(id);\r\n//            if (item) {\r\n//                item.ProductName = lookup.itemById[row.ProductID].ProductName;\r\n//                this.view.updateItem(id, item);\r\n//            }\r\n//        });\r\n\r\n//        row.LineTotal = (row.Quantity || 0) * (row.UnitPrice || 0) - (row.Discount || 0);\r\n//        return true;\r\n//    }\r\n}", "import { Decorators, alertDialog, toId, tryFirst, serviceCall, resolveUrl, EditorUtils } from \"@serenity-is/corelib\";\r\nimport { GridEditorBase, } from \"@serenity-is/extensions\";\r\nimport { LetterDialog } from \"../../LetterDB/Letter/LetterDialog\";\r\nimport { SignLettersColumns, SignLettersRow } from \"../../ServerTypes/SignLettersDB\";\r\nimport { SignLettersDialog } from \"./SignLettersDialog\";\r\n\r\n@Decorators.registerEditor('CorrespondenceSystem.SignLettersDB.SignLettersEditor')\r\n\r\n\r\nexport class SignLettersEditor<P = {}> extends GridEditorBase<SignLettersRow, P> {\r\n    protected getColumnsKey() { return SignLettersColumns.columnsKey; }\r\n    protected getDialogType() { return SignLettersDialog; }\r\n    protected getLocalTextPrefix() { return SignLettersRow.localTextPrefix; }\r\n\r\n\r\n    AddSign() {\r\n        serviceCall(\r\n            {\r\n                url: resolveUrl(\"~/Services/SignLettersDB/SignLetters/AddSignLetter\"),\r\n                onSuccess: (response: any) => {\r\n                    var items = this.view.getItems()\r\n\r\n                    const newItem: SignLettersRow  = {\r\n                        SignTitle: response['Title'],\r\n                        SignId: response['Id'],\r\n                        CreatedDate: response['CreatedDate']\r\n                    };\r\n\r\n                    var id = this.id(newItem)\r\n                    if (id == null) {\r\n                        (newItem as any)[this.getIdProperty()] = this.getNextId()\r\n                    }\r\n\r\n                    items.push(newItem);\r\n                    this.setEntities(items);\r\n\r\n                },\r\n                method : 'post'\r\n            }\r\n        );\r\n    }\r\n\r\n\r\n\r\n    getButtons() {\r\n        var buttons = super.getButtons();\r\n        var addButton = tryFirst(buttons, x => x.cssClass == 'add-button');\r\n\r\n        // Check if the button is found\r\n        if (addButton) {\r\n            // Disable the button after the first click\r\n            let isButtonClickable = true;\r\n\r\n            addButton.onClick = (e) => {\r\n                if (isButtonClickable) {\r\n                    // Call your AddSign method\r\n                    this.AddSign();\r\n\r\n                    // Disable the button\r\n                    isButtonClickable = false;\r\n\r\n                    // Optionally, you can update the button appearance or do other actions\r\n                    addButton.disabled = true;\r\n                }\r\n            };\r\n        }\r\n\r\n        return buttons;\r\n    }\r\n\r\n\r\n    //getButtons(){\r\n    //    var s = super.getButtons();\r\n    //    var btn = tryFirst(s, x => x.cssClass == 'add-button');\r\n    //    btn.onClick = null;\r\n    //    btn.onClick = e => this.AddSign()\r\n    //    return s;\r\n    //}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n}", "\uFEFFimport { LetterAttachmentEditor } from \"@/LetterAttachmentDB/LetterAttachment/LetterAttachmentEditor\";\nimport { SignLettersEditor } from \"@/SignLettersDB/SignLetters/SignLettersEditor\";\nimport { RadioButtonEditor, StringEditor, EnumEditor, ServiceLookupEditor, BooleanEditor, LookupEditor, TextAreaEditor, ImageUploadEditor, PrefixedContext, initFormType } from \"@serenity-is/corelib\";\nimport { ConfidentialLevels } from \"../Modules/Enums.Letter.ConfidentialLevels\";\nimport { LetterTypes } from \"../Modules/Enums.Letter.LetterTypes\";\nimport { PriorityStates } from \"../Modules/Enums.Letter.PriorityStates\";\nimport { States } from \"../Modules/Enums.Letter.States\";\n\nexport interface LetterForm {\n    LetterType: RadioButtonEditor;\n    Title: StringEditor;\n    LetterIdentifier: StringEditor;\n    LetterIdentifierGen: StringEditor;\n    LetterNo: StringEditor;\n    PriorityState: RadioButtonEditor;\n    ConfidentialLevel: RadioButtonEditor;\n    State: EnumEditor;\n    SenderId: ServiceLookupEditor;\n    ReceiverId: ServiceLookupEditor;\n    GrandSubjectId: ServiceLookupEditor;\n    UseDefaultTemplate: BooleanEditor;\n    TemplateId: LookupEditor;\n    LetterContent: TextAreaEditor;\n    Tag: StringEditor;\n    LetterCarrier: StringEditor;\n    HasAttachment: BooleanEditor;\n    NeedAnswer: BooleanEditor;\n    DetailList: LetterAttachmentEditor;\n    SignLettersDetailList: SignLettersEditor;\n    LetterFile: ImageUploadEditor;\n}\n\nexport class LetterForm extends PrefixedContext {\n    static readonly formKey = 'LetterDB.Letter';\n    private static init: boolean;\n\n    constructor(prefix: string) {\n        super(prefix);\n\n        if (!LetterForm.init)  {\n            LetterForm.init = true;\n\n            var w0 = RadioButtonEditor;\n            var w1 = StringEditor;\n            var w2 = EnumEditor;\n            var w3 = ServiceLookupEditor;\n            var w4 = BooleanEditor;\n            var w5 = LookupEditor;\n            var w6 = TextAreaEditor;\n            var w7 = LetterAttachmentEditor;\n            var w8 = SignLettersEditor;\n            var w9 = ImageUploadEditor;\n\n            initFormType(LetterForm, [\n                'LetterType', w0,\n                'Title', w1,\n                'LetterIdentifier', w1,\n                'LetterIdentifierGen', w1,\n                'LetterNo', w1,\n                'PriorityState', w0,\n                'ConfidentialLevel', w0,\n                'State', w2,\n                'SenderId', w3,\n                'ReceiverId', w3,\n                'GrandSubjectId', w3,\n                'UseDefaultTemplate', w4,\n                'TemplateId', w5,\n                'LetterContent', w6,\n                'Tag', w1,\n                'LetterCarrier', w1,\n                'HasAttachment', w4,\n                'NeedAnswer', w4,\n                'DetailList', w7,\n                'SignLettersDetailList', w8,\n                'LetterFile', w9\n            ]);\n        }\n    }\n}\n\n[LetterTypes, PriorityStates, ConfidentialLevels, States]; // referenced types", "\uFEFFimport { Decorators } from \"@serenity-is/corelib\";\r\n\r\nexport enum ConfidentialLevels {\r\n    Normal = 0,\r\n    Secret = 1\r\n}\r\nDecorators.registerEnumType(ConfidentialLevels, 'CorrespondenceSystem.Modules.Enums.Letter.ConfidentialLevels', 'ConfidentialLevels');", "\uFEFFimport { Decorators } from \"@serenity-is/corelib\";\r\n\r\nexport enum LetterTypes {\r\n    Outgoing = 0,\r\n    Incoming = 1\r\n}\r\nDecorators.registerEnumType(LetterTypes, 'CorrespondenceSystem.Modules.Enums.Letter.LetterTypes', 'LetterTypes');", "\uFEFFimport { Decorators } from \"@serenity-is/corelib\";\r\n\r\nexport enum PriorityStates {\r\n    Urgent = 0,\r\n    Instant = 1,\r\n    Normal = 2\r\n}\r\nDecorators.registerEnumType(PriorityStates, 'CorrespondenceSystem.Modules.Enums.Letter.PriorityStates', 'PriorityState');", "\uFEFFimport { fieldsProxy } from \"@serenity-is/corelib\";\r\nimport { LetterAttachmentRow } from \"../LetterAttachmentDB/LetterAttachmentRow\";\r\nimport { SignLettersRow } from \"../SignLettersDB/SignLettersRow\";\r\n\r\nexport interface LetterRow {\r\n    Id?: string;\r\n    UseDefaultTemplate?: boolean;\r\n    TemplateId?: string;\r\n    SenderId?: string;\r\n    ReceiverId?: string;\r\n    GrandSubjectId?: string;\r\n    LetterIdentifier?: string;\r\n    LetterIdentifierGen?: string;\r\n    LetterNo?: string;\r\n    Title?: string;\r\n    LetterContent?: string;\r\n    Tag?: string;\r\n    LetterType?: number;\r\n    State?: number;\r\n    PriorityState?: number;\r\n    ConfidentialLevel?: number;\r\n    HasAttachment?: boolean;\r\n    CreatedDate?: string;\r\n    CreatorUserName?: string;\r\n    ModifiedDate?: string;\r\n    ModifiedUserName?: string;\r\n    LetterCarrier?: string;\r\n    NeedAnswer?: boolean;\r\n    LetterFile?: string;\r\n    TemplateTitle?: string;\r\n    SenderName?: string;\r\n    ReceiverName?: string;\r\n    GrandSubjectTitle?: string;\r\n    IsActive?: number;\r\n    DetailList?: LetterAttachmentRow[];\r\n    SignLettersDetailList?: SignLettersRow[];\r\n}\r\n\r\nexport abstract class LetterRow {\r\n    static readonly idProperty = 'Id';\r\n    static readonly isActiveProperty = 'IsActive';\r\n    static readonly nameProperty = 'LetterIdentifier';\r\n    static readonly localTextPrefix = 'LetterDB.Letter';\r\n    static readonly deletePermission = 'Administration:General';\r\n    static readonly insertPermission = 'Administration:General';\r\n    static readonly readPermission = 'Administration:General';\r\n    static readonly updatePermission = 'Administration:General';\r\n\r\n    static readonly Fields = fieldsProxy<LetterRow>();\r\n}", "\uFEFFimport { SaveRequest, SaveResponse, ServiceOptions, DeleteRequest, DeleteResponse, RetrieveRequest, RetrieveResponse, ListRequest, ListResponse, ServiceRequest, serviceRequest } from \"@serenity-is/corelib\";\r\nimport { LetterRow } from \"./LetterRow\";\r\n\r\nexport namespace LetterService {\r\n    export const baseUrl = 'LetterDB/Letter';\r\n\r\n    export declare function Create(request: SaveRequest<LetterRow>, onSuccess?: (response: SaveResponse) => void, opt?: ServiceOptions<any>): JQueryXHR;\r\n    export declare function Update(request: SaveRequest<LetterRow>, onSuccess?: (response: SaveResponse) => void, opt?: ServiceOptions<any>): JQueryXHR;\r\n    export declare function Delete(request: DeleteRequest, onSuccess?: (response: DeleteResponse) => void, opt?: ServiceOptions<any>): JQueryXHR;\r\n    export declare function Retrieve(request: RetrieveRequest, onSuccess?: (response: RetrieveResponse<LetterRow>) => void, opt?: ServiceOptions<any>): JQueryXHR;\r\n    export declare function List(request: ListRequest, onSuccess?: (response: ListResponse<LetterRow>) => void, opt?: ServiceOptions<any>): JQueryXHR;\r\n    export declare function SetDefaultRecriverSender(request: ServiceRequest, onSuccess?: (response: string) => void, opt?: ServiceOptions<any>): JQueryXHR;\r\n    export declare function SetDefaultTemplate(request: ServiceRequest, onSuccess?: (response: string) => void, opt?: ServiceOptions<any>): JQueryXHR;\r\n\r\n    export const Methods = {\r\n        Create: \"LetterDB/Letter/Create\",\r\n        Update: \"LetterDB/Letter/Update\",\r\n        Delete: \"LetterDB/Letter/Delete\",\r\n        Retrieve: \"LetterDB/Letter/Retrieve\",\r\n        List: \"LetterDB/Letter/List\",\r\n        SetDefaultRecriverSender: \"LetterDB/Letter/SetDefaultRecriverSender\",\r\n        SetDefaultTemplate: \"LetterDB/Letter/SetDefaultTemplate\"\r\n    } as const;\r\n\r\n    [\r\n        'Create', \r\n        'Update', \r\n        'Delete', \r\n        'Retrieve', \r\n        'List', \r\n        'SetDefaultRecriverSender', \r\n        'SetDefaultTemplate'\r\n    ].forEach(x => {\r\n        (<any>LetterService)[x] = function (r, s, o) {\r\n            return serviceRequest(baseUrl + '/' + x, r, s, o);\r\n        };\r\n    });\r\n}", "\uFEFFimport { LetterColumns, LetterRow, LetterService } from '@/ServerTypes/LetterDB';\r\nimport { Decorators, EntityGrid } from '@serenity-is/corelib';\r\nimport { LetterDialog } from './LetterDialog';\r\n\r\n@Decorators.registerClass('CorrespondenceSystem.LetterDB.LetterGrid')\r\nexport class LetterGrid extends EntityGrid<LetterRow, any> {\r\n    protected getColumnsKey() { return LetterColumns.columnsKey; }\r\n    protected getDialogType() { return LetterDialog; }\r\n    protected getRowDefinition() { return LetterRow; }\r\n    protected getService() { return LetterService.baseUrl; }\r\n\r\n    constructor(container: JQuery) {\r\n        super(container);\r\n    }\r\n}", "import { LetterForm, LetterRow, LetterService } from '@/ServerTypes/LetterDB';\r\nimport { Decorators, EntityDialog, resolveUrl, serviceCall, EditorUtils, notifyError, tryFirst, indexOf } from '@serenity-is/corelib';\r\nimport { LetterAttachmentRow } from '../../ServerTypes/LetterAttachmentDB';\r\nimport { LetterTypes, States } from '../../ServerTypes/Modules';\r\n\r\n@Decorators.registerClass('CorrespondenceSystem.LetterDB.LetterDialog')\r\nexport class LetterDialog extends EntityDialog<LetterRow, any> {\r\n    protected getFormKey() { return LetterForm.formKey; }\r\n    protected getRowDefinition() { return LetterRow; }\r\n    protected getService() { return LetterService.baseUrl; }\r\n\r\n    protected form = new LetterForm(this.idPrefix);\r\n\r\n    //constructor(container: JQuery) {\r\n    //    super(container);\r\n    //    this.SetDefaultSender()\r\n    //}\r\n\r\n\r\n    protected getToolbarButtons() {\r\n        var buttons = super.getToolbarButtons();\r\n\r\n        buttons.splice(indexOf(buttons, x => x.cssClass == \"undo-delete-button\"), 1);\r\n        buttons.splice(indexOf(buttons, x => x.cssClass == \"localization-button\"), 1);\r\n        buttons.splice(indexOf(buttons, x => x.cssClass == \"clone-button\"), 1);\r\n        buttons.splice(indexOf(buttons, x => x.cssClass == \"apply-changes-button\"), 1);      \r\n\r\n        return buttons;\r\n    }\r\n\r\n\r\n    afterLoadEntity() {\r\n        this.SetRecriverSender()\r\n\r\n\r\n        this.form.LetterType.changeSelect2(e => {\r\n            if (this.form.LetterType.value === LetterTypes.Outgoing.toString()) {\r\n                EditorUtils.setValue(this.form.State, States.Draft);            \r\n            }\r\n        });\r\n\r\n        this.form.LetterType.changeSelect2(e => {\r\n            this.SetDefaultTemplate();\r\n        });\r\n        \r\n    }\r\n\r\n    validateBeforeSave() {\r\n        if (this.form.HasAttachment.value && this.form.DetailList.value.length == 0) {\r\n            notifyError(\"Attach file!!!\");\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n\r\n\r\n    SetRecriverSender() {\r\n        serviceCall({\r\n            url: resolveUrl(\"~/Services/LetterDB/Letter/SetDefaultRecriverSender\"),\r\n            onSuccess: (response: any) => {\r\n                if (response) {\r\n                    this.form.LetterType.changeSelect2(e => {\r\n                        if (this.form.LetterType.value == LetterTypes.Incoming.toString()) {\r\n\r\n                            EditorUtils.setValue(this.form.ReceiverId, response);\r\n                            EditorUtils.setReadonly(this.form.ReceiverId.element,true);\r\n                            EditorUtils.setValue(this.form.SenderId, null);\r\n                            EditorUtils.setReadonly(this.form.SenderId.element, false);\r\n                        }\r\n\r\n                        if (this.form.LetterType.value == LetterTypes.Outgoing.toString()) {\r\n                            var id = this.SetRecriverSender();\r\n\r\n                            EditorUtils.setValue(this.form.SenderId, response);\r\n                            EditorUtils.setReadonly(this.form.SenderId.element, true);\r\n                            EditorUtils.setValue(this.form.ReceiverId, null);\r\n                            EditorUtils.setReadonly(this.form.ReceiverId.element, false);\r\n                        }\r\n                    });\r\n\r\n                } else {\r\n                    console.error('Invalid response format for SetDefaultRecriverSender');\r\n                }\r\n            },\r\n            method: 'post'\r\n        });\r\n    }\r\n\r\n\r\n    SetDefaultTemplate() {\r\n        serviceCall({\r\n            url: resolveUrl(\"~/Services/LetterDB/Letter/SetDefaultTemplate\"),\r\n            onSuccess: (response: any) => {\r\n\r\n                if (this.form.LetterType.value === LetterTypes.Outgoing.toString()) {\r\n                    EditorUtils.setValue(this.form.UseDefaultTemplate, true);\r\n                    EditorUtils.setValue(this.form.TemplateId, response);\r\n                    EditorUtils.setReadonly(this.form.TemplateId.element, true);\r\n                } else {\r\n                    EditorUtils.setValue(this.form.UseDefaultTemplate, false);\r\n                    EditorUtils.setValue(this.form.TemplateId, null);\r\n                    EditorUtils.setReadonly(this.form.TemplateId.element, false);\r\n                }\r\n\r\n                 \r\n                \r\n            },\r\n            method: 'post'\r\n        });\r\n    }\r\n\r\n\r\n\r\n\r\n    \r\n}"],
  "mappings": "6QAAC,IAAAA,EAAuC,SCAvC,IAAAC,EAAyC,SCAzC,IAAAC,EAA2B,SAEhBC,OACRA,IAAA,MAAQ,GAAR,QACAA,IAAA,OAAS,GAAT,SACAA,IAAA,SAAW,GAAX,WAHQA,OAAA,IAKZ,aAAW,iBAAiBA,EAAQ,mDAAoD,OAAO,EDMxF,IAAMC,EAAN,MAAMA,UAAsB,aAAuB,CAG1D,EAH0DC,EAAAD,EAAA,iBAA7CA,EACO,WAAa,kBADpBA,EAEO,UAAS,eAA2B,EAFjD,IAAME,EAANF,EEZP,IAAAG,EAA8C,SAC9CC,EAA+B,SAIxB,IAAMC,EAAN,cAA6C,gBAAuC,CAC7E,eAAgB,CAAE,OAAOC,EAAwB,UAAY,CAC7D,eAAgB,CAAE,OAAOC,CAAwB,CACjD,oBAAqB,CAAE,OAAOC,EAAoB,eAAiB,CAwBjF,EA3B2FC,EAAAJ,EAAA,0BAA9EA,EAANK,EAAA,CADN,aAAW,eAAe,gEAAgE,GAC9EL,GCNb,IAAAM,EAA8F,SAC9FC,EAAgC,SAQzB,IAAMC,EAAN,cAAwC,gBAAkC,CACnE,eAAgB,CAAE,OAAOC,EAAmB,UAAY,CACxD,eAAgB,CAAE,OAAOC,CAAmB,CAC5C,oBAAqB,CAAE,OAAOC,EAAe,eAAiB,CAGxE,SAAU,IACN,eACI,CACI,OAAK,cAAW,oDAAoD,EACpE,UAAYC,GAAkB,CAC1B,IAAIC,EAAQ,KAAK,KAAK,SAAS,EAE/B,IAAMC,EAA2B,CAC7B,UAAWF,EAAS,MACpB,OAAQA,EAAS,GACjB,YAAaA,EAAS,WAC1B,EAEA,IAAIG,EAAK,KAAK,GAAGD,CAAO,EACpBC,GAAM,OACLD,EAAgB,KAAK,cAAc,CAAC,EAAI,KAAK,UAAU,GAG5DD,EAAM,KAAKC,CAAO,EAClB,KAAK,YAAYD,CAAK,CAE1B,EACA,OAAS,MACb,CACJ,CACJ,CAIA,YAAa,CACT,IAAIG,EAAU,MAAM,WAAW,EAC3BC,KAAY,YAASD,EAASE,GAAKA,EAAE,UAAY,YAAY,EAGjE,GAAID,EAAW,CAEX,IAAIE,EAAoB,GAExBF,EAAU,QAAWG,GAAM,CACnBD,IAEA,KAAK,QAAQ,EAGbA,EAAoB,GAGpBF,EAAU,SAAW,GAE7B,CACJ,CAEA,OAAOD,CACX,CAiBJ,EA5EiFK,EAAAb,EAAA,qBAApEA,EAANc,EAAA,CAHN,aAAW,eAAe,sDAAsD,GAGpEd,GCPb,IAAAe,EAAgL,SCF/K,IAAAC,EAA2B,SAEhBC,OACRA,IAAA,OAAS,GAAT,SACAA,IAAA,OAAS,GAAT,SAFQA,OAAA,IAIZ,aAAW,iBAAiBA,EAAoB,+DAAgE,oBAAoB,ECNnI,IAAAC,EAA2B,SAEhBC,OACRA,IAAA,SAAW,GAAX,WACAA,IAAA,SAAW,GAAX,WAFQA,OAAA,IAIZ,aAAW,iBAAiBA,EAAa,wDAAyD,aAAa,ECN9G,IAAAC,EAA2B,SAEhBC,OACRA,IAAA,OAAS,GAAT,SACAA,IAAA,QAAU,GAAV,UACAA,IAAA,OAAS,GAAT,SAHQA,OAAA,IAKZ,aAAW,iBAAiBA,EAAgB,2DAA4D,eAAe,EHyBhH,IAAMC,EAAN,MAAMA,UAAmB,iBAAgB,CAI5C,YAAYC,EAAgB,CAGxB,GAFA,MAAMA,CAAM,EAER,CAACD,EAAW,KAAO,CACnBA,EAAW,KAAO,GAElB,IAAIE,EAAK,oBACLC,EAAK,eACLC,EAAK,aACLC,EAAK,sBACLC,EAAK,gBACLC,EAAK,eACLC,EAAK,iBACLC,EAAKC,EACLC,EAAKC,EACLC,EAAK,uBAET,gBAAab,EAAY,CACrB,aAAcE,EACd,QAASC,EACT,mBAAoBA,EACpB,sBAAuBA,EACvB,WAAYA,EACZ,gBAAiBD,EACjB,oBAAqBA,EACrB,QAASE,EACT,WAAYC,EACZ,aAAcA,EACd,iBAAkBA,EAClB,qBAAsBC,EACtB,aAAcC,EACd,gBAAiBC,EACjB,MAAOL,EACP,gBAAiBA,EACjB,gBAAiBG,EACjB,aAAcA,EACd,aAAcG,EACd,wBAAyBE,EACzB,aAAcE,CAClB,CAAC,CACL,CACJ,CACJ,EA9CgDC,EAAAd,EAAA,cAAnCA,EACO,QAAU,kBADvB,IAAMe,EAANf,EIhCN,IAAAgB,EAA4B,SAsCtB,IAAeC,EAAf,MAAeA,CAAU,CAWhC,EAXgCC,EAAAD,EAAA,aAAVA,EACF,WAAa,KADXA,EAEF,iBAAmB,WAFjBA,EAGF,aAAe,mBAHbA,EAIF,gBAAkB,kBAJhBA,EAKF,iBAAmB,yBALjBA,EAMF,iBAAmB,yBANjBA,EAOF,eAAiB,yBAPfA,EAQF,iBAAmB,yBARjBA,EAUF,UAAS,eAAuB,EAV7C,IAAeE,EAAfF,ECtCN,IAAAG,EAAuL,SAGvKC,OACAA,EAAA,QAAU,kBAUVA,EAAA,QAAU,CACnB,OAAQ,yBACR,OAAQ,yBACR,OAAQ,yBACR,SAAU,2BACV,KAAM,uBACN,yBAA0B,2CAC1B,mBAAoB,oCACxB,EAEA,CACI,SACA,SACA,SACA,WACA,OACA,2BACA,oBACJ,EAAE,QAAQC,GAAK,CACLD,EAAeC,CAAC,EAAI,SAAUC,EAAGC,EAAGC,EAAG,CACzC,SAAO,kBAAeJ,EAAA,QAAU,IAAMC,EAAGC,EAAGC,EAAGC,CAAC,CACpD,CACJ,CAAC,IAjCYJ,MAAA,KCFjB,IAAAK,EAAuC,SCAvC,IAAAC,EAA+G,SAKxG,IAAMC,EAAN,cAA2B,cAA6B,CAAxD,kCAKH,KAAU,KAAO,IAAIC,EAAW,KAAK,QAAQ,EAJnC,YAAa,CAAE,OAAOA,EAAW,OAAS,CAC1C,kBAAmB,CAAE,OAAOC,CAAW,CACvC,YAAa,CAAE,OAAOC,EAAc,OAAS,CAU7C,mBAAoB,CAC1B,IAAIC,EAAU,MAAM,kBAAkB,EAEtC,OAAAA,EAAQ,UAAO,WAAQA,EAASC,GAAKA,EAAE,UAAY,oBAAoB,EAAG,CAAC,EAC3ED,EAAQ,UAAO,WAAQA,EAASC,GAAKA,EAAE,UAAY,qBAAqB,EAAG,CAAC,EAC5ED,EAAQ,UAAO,WAAQA,EAASC,GAAKA,EAAE,UAAY,cAAc,EAAG,CAAC,EACrED,EAAQ,UAAO,WAAQA,EAASC,GAAKA,EAAE,UAAY,sBAAsB,EAAG,CAAC,EAEtED,CACX,CAGA,iBAAkB,CACd,KAAK,kBAAkB,EAGvB,KAAK,KAAK,WAAW,cAAc,GAAK,CAChC,KAAK,KAAK,WAAW,WAA+B,SAAS,GAC7D,cAAY,SAAS,KAAK,KAAK,OAAmB,CAE1D,CAAC,EAED,KAAK,KAAK,WAAW,cAAc,GAAK,CACpC,KAAK,mBAAmB,CAC5B,CAAC,CAEL,CAEA,oBAAqB,CACjB,OAAI,KAAK,KAAK,cAAc,OAAS,KAAK,KAAK,WAAW,MAAM,QAAU,MACtE,eAAY,gBAAgB,EACrB,IAEJ,EACX,CAIA,mBAAoB,IAChB,eAAY,CACR,OAAK,cAAW,qDAAqD,EACrE,UAAYE,GAAkB,CACtBA,EACA,KAAK,KAAK,WAAW,cAAcC,GAAK,CASpC,GARI,KAAK,KAAK,WAAW,UAA8B,SAAS,IAE5D,cAAY,SAAS,KAAK,KAAK,WAAYD,CAAQ,EACnD,cAAY,YAAY,KAAK,KAAK,WAAW,QAAQ,EAAI,EACzD,cAAY,SAAS,KAAK,KAAK,SAAU,IAAI,EAC7C,cAAY,YAAY,KAAK,KAAK,SAAS,QAAS,EAAK,GAGzD,KAAK,KAAK,WAAW,UAA8B,SAAS,EAAG,CAC/D,IAAIE,EAAK,KAAK,kBAAkB,EAEhC,cAAY,SAAS,KAAK,KAAK,SAAUF,CAAQ,EACjD,cAAY,YAAY,KAAK,KAAK,SAAS,QAAS,EAAI,EACxD,cAAY,SAAS,KAAK,KAAK,WAAY,IAAI,EAC/C,cAAY,YAAY,KAAK,KAAK,WAAW,QAAS,EAAK,CAC/D,CACJ,CAAC,EAGD,QAAQ,MAAM,sDAAsD,CAE5E,EACA,OAAQ,MACZ,CAAC,CACL,CAGA,oBAAqB,IACjB,eAAY,CACR,OAAK,cAAW,+CAA+C,EAC/D,UAAYA,GAAkB,CAEtB,KAAK,KAAK,WAAW,WAA+B,SAAS,GAC7D,cAAY,SAAS,KAAK,KAAK,mBAAoB,EAAI,EACvD,cAAY,SAAS,KAAK,KAAK,WAAYA,CAAQ,EACnD,cAAY,YAAY,KAAK,KAAK,WAAW,QAAS,EAAI,IAE1D,cAAY,SAAS,KAAK,KAAK,mBAAoB,EAAK,EACxD,cAAY,SAAS,KAAK,KAAK,WAAY,IAAI,EAC/C,cAAY,YAAY,KAAK,KAAK,WAAW,QAAS,EAAK,EAKnE,EACA,OAAQ,MACZ,CAAC,CACL,CAMJ,EA9G+DG,EAAAT,EAAA,gBAAlDA,EAANU,EAAA,CADN,aAAW,cAAc,4CAA4C,GACzDV,GDDN,IAAMW,EAAN,cAAyB,YAA2B,CAC7C,eAAgB,CAAE,OAAOC,EAAc,UAAY,CACnD,eAAgB,CAAE,OAAOC,CAAc,CACvC,kBAAmB,CAAE,OAAOC,CAAW,CACvC,YAAa,CAAE,OAAOC,EAAc,OAAS,CAEvD,YAAYC,EAAmB,CAC3B,MAAMA,CAAS,CACnB,CACJ,EAT2DC,EAAAN,EAAA,cAA9CA,EAANO,EAAA,CADN,aAAW,cAAc,0CAA0C,GACvDP,GXFE,SAARQ,IAA4B,IAC/B,0BAAuB,IAAIC,EAAW,EAAE,UAAU,CAAC,EAAE,OAAO,CAChE,CAFwBC,EAAAF,GAAA",
  "names": ["import_corelib", "import_corelib", "import_corelib", "States", "_LetterColumns", "__name", "LetterColumns", "import_corelib", "import_extensions", "LetterAttachmentEditor", "LetterAttachmentColumns", "LetterAttachmentDialog", "LetterAttachmentRow", "__name", "__decorateClass", "import_corelib", "import_extensions", "SignLettersEditor", "SignLettersColumns", "SignLettersDialog", "SignLettersRow", "response", "items", "newItem", "id", "buttons", "addButton", "x", "isButtonClickable", "e", "__name", "__decorateClass", "import_corelib", "import_corelib", "ConfidentialLevels", "import_corelib", "LetterTypes", "import_corelib", "PriorityStates", "_LetterForm", "prefix", "w0", "w1", "w2", "w3", "w4", "w5", "w6", "w7", "LetterAttachmentEditor", "w8", "SignLettersEditor", "w9", "__name", "LetterForm", "import_corelib", "_LetterRow", "__name", "LetterRow", "import_corelib", "LetterService", "x", "r", "s", "o", "import_corelib", "import_corelib", "LetterDialog", "LetterForm", "LetterRow", "LetterService", "buttons", "x", "response", "e", "id", "__name", "__decorateClass", "LetterGrid", "LetterColumns", "LetterDialog", "LetterRow", "LetterService", "container", "__name", "__decorateClass", "pageInit", "LetterGrid", "__name"]
}
