{
  "version": 3,
  "sources": ["../../../../../Modules/RecriverSenderDB/RecriverSender/RecriverSenderPage.ts", "../../../../../Modules/ServerTypes/RecriverSenderDB/RecriverSenderColumns.ts", "../../../../../Modules/ServerTypes/RecriverSenderDB/RecriverSenderForm.ts", "../../../../../Modules/ServerTypes/RecriverSenderDB/RecriverSenderRow.ts", "../../../../../Modules/ServerTypes/RecriverSenderDB/RecriverSenderService.ts", "../../../../../Modules/RecriverSenderDB/RecriverSender/RecriverSenderGrid.ts", "../../../../../Modules/RecriverSenderDB/RecriverSender/RecriverSenderDialog.ts"],
  "sourcesContent": ["\uFEFFimport { initFullHeightGridPage } from '@serenity-is/corelib';\r\nimport { RecriverSenderGrid } from './RecriverSenderGrid';\r\n\r\nexport default function pageInit() {\n    initFullHeightGridPage(new RecriverSenderGrid($('#GridDiv')).element);\n}", "\uFEFFimport { ColumnsBase, fieldsProxy } from \"@serenity-is/corelib\";\nimport { Column } from \"@serenity-is/sleekgrid\";\nimport { RecriverSenderRow } from \"./RecriverSenderRow\";\n\nexport interface RecriverSenderColumns {\n    Id: Column<RecriverSenderRow>;\n    Name: Column<RecriverSenderRow>;\n    IsDefault: Column<RecriverSenderRow>;\n    CreatedDate: Column<RecriverSenderRow>;\n    CreatorUserName: Column<RecriverSenderRow>;\n    ModifiedDate: Column<RecriverSenderRow>;\n    ModifiedUserName: Column<RecriverSenderRow>;\n    TimeStamp: Column<RecriverSenderRow>;\n}\n\nexport class RecriverSenderColumns extends ColumnsBase<RecriverSenderRow> {\n    static readonly columnsKey = 'RecriverSenderDB.RecriverSender';\n    static readonly Fields = fieldsProxy<RecriverSenderColumns>();\n}", "\uFEFFimport { StringEditor, BooleanEditor, DateEditor, PrefixedContext, initFormType } from \"@serenity-is/corelib\";\n\nexport interface RecriverSenderForm {\n    Name: StringEditor;\n    IsDefault: BooleanEditor;\n    CreatedDate: DateEditor;\n    CreatorUserName: StringEditor;\n    ModifiedDate: DateEditor;\n    ModifiedUserName: StringEditor;\n    TimeStamp: StringEditor;\n}\n\nexport class RecriverSenderForm extends PrefixedContext {\n    static readonly formKey = 'RecriverSenderDB.RecriverSender';\n    private static init: boolean;\n\n    constructor(prefix: string) {\n        super(prefix);\n\n        if (!RecriverSenderForm.init)  {\n            RecriverSenderForm.init = true;\n\n            var w0 = StringEditor;\n            var w1 = BooleanEditor;\n            var w2 = DateEditor;\n\n            initFormType(RecriverSenderForm, [\n                'Name', w0,\n                'IsDefault', w1,\n                'CreatedDate', w2,\n                'CreatorUserName', w0,\n                'ModifiedDate', w2,\n                'ModifiedUserName', w0,\n                'TimeStamp', w0\n            ]);\n        }\n    }\n}", "\uFEFFimport { fieldsProxy } from \"@serenity-is/corelib\";\n\nexport interface RecriverSenderRow {\n    Id?: string;\n    Name?: string;\n    IsDefault?: boolean;\n    CreatedDate?: string;\n    CreatorUserName?: string;\n    ModifiedDate?: string;\n    ModifiedUserName?: string;\n    TimeStamp?: number[];\n}\n\nexport abstract class RecriverSenderRow {\n    static readonly idProperty = 'Id';\n    static readonly nameProperty = 'Name';\n    static readonly localTextPrefix = 'RecriverSenderDB.RecriverSender';\n    static readonly deletePermission = 'Administration:General';\n    static readonly insertPermission = 'Administration:General';\n    static readonly readPermission = 'Administration:General';\n    static readonly updatePermission = 'Administration:General';\n\n    static readonly Fields = fieldsProxy<RecriverSenderRow>();\n}", "\uFEFFimport { SaveRequest, SaveResponse, ServiceOptions, DeleteRequest, DeleteResponse, RetrieveRequest, RetrieveResponse, ListRequest, ListResponse, serviceRequest } from \"@serenity-is/corelib\";\nimport { RecriverSenderRow } from \"./RecriverSenderRow\";\n\nexport namespace RecriverSenderService {\n    export const baseUrl = 'RecriverSenderDB/RecriverSender';\n\n    export declare function Create(request: SaveRequest<RecriverSenderRow>, onSuccess?: (response: SaveResponse) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function Update(request: SaveRequest<RecriverSenderRow>, onSuccess?: (response: SaveResponse) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function Delete(request: DeleteRequest, onSuccess?: (response: DeleteResponse) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function Retrieve(request: RetrieveRequest, onSuccess?: (response: RetrieveResponse<RecriverSenderRow>) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function List(request: ListRequest, onSuccess?: (response: ListResponse<RecriverSenderRow>) => void, opt?: ServiceOptions<any>): JQueryXHR;\n\n    export const Methods = {\n        Create: \"RecriverSenderDB/RecriverSender/Create\",\n        Update: \"RecriverSenderDB/RecriverSender/Update\",\n        Delete: \"RecriverSenderDB/RecriverSender/Delete\",\n        Retrieve: \"RecriverSenderDB/RecriverSender/Retrieve\",\n        List: \"RecriverSenderDB/RecriverSender/List\"\n    } as const;\n\n    [\n        'Create', \n        'Update', \n        'Delete', \n        'Retrieve', \n        'List'\n    ].forEach(x => {\n        (<any>RecriverSenderService)[x] = function (r, s, o) {\n            return serviceRequest(baseUrl + '/' + x, r, s, o);\n        };\n    });\n}", "\uFEFFimport { RecriverSenderColumns, RecriverSenderRow, RecriverSenderService } from '@/ServerTypes/RecriverSenderDB';\r\nimport { Decorators, EntityGrid } from '@serenity-is/corelib';\r\nimport { RecriverSenderDialog } from './RecriverSenderDialog';\r\n\r\n@Decorators.registerClass('CorrespondenceSystem.RecriverSenderDB.RecriverSenderGrid')\nexport class RecriverSenderGrid extends EntityGrid<RecriverSenderRow, any> {\n    protected getColumnsKey() { return RecriverSenderColumns.columnsKey; }\n    protected getDialogType() { return RecriverSenderDialog; }\n    protected getRowDefinition() { return RecriverSenderRow; }\n    protected getService() { return RecriverSenderService.baseUrl; }\n\n    constructor(container: JQuery) {\n        super(container);\n    }\n}", "\uFEFFimport { RecriverSenderForm, RecriverSenderRow, RecriverSenderService } from '@/ServerTypes/RecriverSenderDB';\r\nimport { Decorators, EntityDialog } from '@serenity-is/corelib';\r\n\r\n@Decorators.registerClass('CorrespondenceSystem.RecriverSenderDB.RecriverSenderDialog')\nexport class RecriverSenderDialog extends EntityDialog<RecriverSenderRow, any> {\n    protected getFormKey() { return RecriverSenderForm.formKey; }\n    protected getRowDefinition() { return RecriverSenderRow; }\n    protected getService() { return RecriverSenderService.baseUrl; }\n\n    protected form = new RecriverSenderForm(this.idPrefix);\n}"],
  "mappings": "4EAAC,IAAAA,EAAuC,SCAvC,IAAAC,EAAyC,SAenC,IAAMC,EAAN,MAAMA,UAA8B,aAA+B,CAG1E,EAH0EC,EAAAD,EAAA,yBAA7DA,EACO,WAAa,kCADpBA,EAEO,UAAS,eAAmC,EAFzD,IAAME,EAANF,ECfN,IAAAG,EAAuF,SAYjF,IAAMC,EAAN,MAAMA,UAA2B,iBAAgB,CAIpD,YAAYC,EAAgB,CAGxB,GAFA,MAAMA,CAAM,EAER,CAACD,EAAmB,KAAO,CAC3BA,EAAmB,KAAO,GAE1B,IAAIE,EAAK,eACLC,EAAK,gBACLC,EAAK,gBAET,gBAAaJ,EAAoB,CAC7B,OAAQE,EACR,YAAaC,EACb,cAAeC,EACf,kBAAmBF,EACnB,eAAgBE,EAChB,mBAAoBF,EACpB,YAAaA,CACjB,CAAC,CACL,CACJ,CACJ,EAzBwDG,EAAAL,EAAA,sBAA3CA,EACO,QAAU,kCADvB,IAAMM,EAANN,ECZN,IAAAO,EAA4B,SAatB,IAAeC,EAAf,MAAeA,CAAkB,CAUxC,EAVwCC,EAAAD,EAAA,qBAAlBA,EACF,WAAa,KADXA,EAEF,aAAe,OAFbA,EAGF,gBAAkB,kCAHhBA,EAIF,iBAAmB,yBAJjBA,EAKF,iBAAmB,yBALjBA,EAMF,eAAiB,yBANfA,EAOF,iBAAmB,yBAPjBA,EASF,UAAS,eAA+B,EATrD,IAAeE,EAAfF,ECbN,IAAAG,EAAuK,SAGvJC,OACAA,EAAA,QAAU,kCAQVA,EAAA,QAAU,CACnB,OAAQ,yCACR,OAAQ,yCACR,OAAQ,yCACR,SAAU,2CACV,KAAM,sCACV,EAEA,CACI,SACA,SACA,SACA,WACA,MACJ,EAAE,QAAQC,GAAK,CACLD,EAAuBC,CAAC,EAAI,SAAUC,EAAGC,EAAGC,EAAG,CACjD,SAAO,kBAAeJ,EAAA,QAAU,IAAMC,EAAGC,EAAGC,EAAGC,CAAC,CACpD,CACJ,CAAC,IA3BYJ,MAAA,KCFjB,IAAAK,EAAuC,SCAvC,IAAAC,EAAyC,SAGlC,IAAMC,EAAN,cAAmC,cAAqC,CAAxE,kCAKH,KAAU,KAAO,IAAIC,EAAmB,KAAK,QAAQ,EAJ3C,YAAa,CAAE,OAAOA,EAAmB,OAAS,CAClD,kBAAmB,CAAE,OAAOC,CAAmB,CAC/C,YAAa,CAAE,OAAOC,EAAsB,OAAS,CAGnE,EAN+EC,EAAAJ,EAAA,wBAAlEA,EAANK,EAAA,CADN,aAAW,cAAc,4DAA4D,GACzEL,GDCN,IAAMM,EAAN,cAAiC,YAAmC,CAC7D,eAAgB,CAAE,OAAOC,EAAsB,UAAY,CAC3D,eAAgB,CAAE,OAAOC,CAAsB,CAC/C,kBAAmB,CAAE,OAAOC,CAAmB,CAC/C,YAAa,CAAE,OAAOC,EAAsB,OAAS,CAE/D,YAAYC,EAAmB,CAC3B,MAAMA,CAAS,CACnB,CACJ,EAT2EC,EAAAN,EAAA,sBAA9DA,EAANO,EAAA,CADN,aAAW,cAAc,0DAA0D,GACvEP,GLFE,SAARQ,GAA4B,IAC/B,0BAAuB,IAAIC,EAAmB,EAAE,UAAU,CAAC,EAAE,OAAO,CACxE,CAFwBC,EAAAF,EAAA",
  "names": ["import_corelib", "import_corelib", "_RecriverSenderColumns", "__name", "RecriverSenderColumns", "import_corelib", "_RecriverSenderForm", "prefix", "w0", "w1", "w2", "__name", "RecriverSenderForm", "import_corelib", "_RecriverSenderRow", "__name", "RecriverSenderRow", "import_corelib", "RecriverSenderService", "x", "r", "s", "o", "import_corelib", "import_corelib", "RecriverSenderDialog", "RecriverSenderForm", "RecriverSenderRow", "RecriverSenderService", "__name", "__decorateClass", "RecriverSenderGrid", "RecriverSenderColumns", "RecriverSenderDialog", "RecriverSenderRow", "RecriverSenderService", "container", "__name", "__decorateClass", "pageInit", "RecriverSenderGrid", "__name"]
}
