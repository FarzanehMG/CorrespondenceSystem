{
  "version": 3,
  "sources": ["../../../../../Modules/LetterDB/Letter/LetterPage.ts", "../../../../../Modules/ServerTypes/LetterDB/LetterColumns.ts", "../../../../../Modules/ServerTypes/Modules/Enums.Letter.States.ts", "../../../../../Modules/CounterpartDB/Counterpart/CounterpartEditor.ts", "../../../../../Modules/LetterAttachmentDB/LetterAttachment/LetterAttachmentEditor.ts", "../../../../../Modules/RelatedLettersDB/RelatedLetters/RelatedLettersEditor.ts", "../../../../../Modules/SignLettersDB/SignLetters/SignLettersEditor.ts", "../../../../../Modules/ServerTypes/LetterDB/LetterForm.ts", "../../../../../Modules/ServerTypes/Modules/Enums.Letter.ConfidentialLevels.ts", "../../../../../Modules/ServerTypes/Modules/Enums.Letter.LetterTypes.ts", "../../../../../Modules/ServerTypes/Modules/Enums.Letter.PriorityStates.ts", "../../../../../Modules/ServerTypes/LetterDB/LetterRow.ts", "../../../../../Modules/ServerTypes/LetterDB/LetterService.ts", "../../../../../Modules/LetterDB/Letter/LetterDialog.ts", "../../../../../Modules/LetterDB/Letter/LetterGrid.ts"],
  "sourcesContent": ["\uFEFFimport { initFullHeightGridPage } from '@serenity-is/corelib';\r\nimport { LetterGrid } from './LetterGrid';\r\n\r\nexport default function pageInit() {\r\n    initFullHeightGridPage(new LetterGrid($('#GridDiv')).element);\r\n}", "\uFEFFimport { ColumnsBase, fieldsProxy } from \"@serenity-is/corelib\";\r\nimport { Column } from \"@serenity-is/sleekgrid\";\r\nimport { States } from \"../Modules/Enums.Letter.States\";\r\nimport { LetterRow } from \"./LetterRow\";\r\n\r\nexport interface LetterColumns {\r\n    Title: Column<LetterRow>;\r\n    Tag: Column<LetterRow>;\r\n    GrandSubjectTitle: Column<LetterRow>;\r\n    LetterNo: Column<LetterRow>;\r\n    CreatedDate: Column<LetterRow>;\r\n    State: Column<LetterRow>;\r\n    LetterType: Column<LetterRow>;\r\n}\r\n\r\nexport class LetterColumns extends ColumnsBase<LetterRow> {\r\n    static readonly columnsKey = 'LetterDB.Letter';\r\n    static readonly Fields = fieldsProxy<LetterColumns>();\r\n}\r\n\r\n[States]; // referenced types", "\uFEFFimport { Decorators } from \"@serenity-is/corelib\";\r\n\r\nexport enum States {\r\n    Draft = 0,\r\n    Posted = 1,\r\n    Received = 2\r\n}\r\nDecorators.registerEnumType(States, 'CorrespondenceSystem.Modules.Enums.Letter.States', 'State');", "\r\nimport { CounterpartColumns, CounterpartRow } from \"@/ServerTypes/CounterpartDB\";\r\nimport { Decorators, alertDialog, toId } from \"@serenity-is/corelib\";\r\nimport { GridEditorBase } from \"@serenity-is/extensions\";\r\nimport { CounterpartDialog } from \"./CounterpartDialog\";\r\n\r\n@Decorators.registerEditor('CorrespondenceSystem.CounterpartDB.CounterpartEditor')\r\nexport class TaskDescriptionEditor<P = {}> extends GridEditorBase<CounterpartRow, P> {\r\n    protected getColumnsKey() { return CounterpartColumns.columnsKey; }\r\n    protected getDialogType() { return CounterpartDialog; }\r\n    protected getLocalTextPrefix() { return CounterpartRow.localTextPrefix; }\r\n\r\n    validateEntity(row, id) {\r\n        row.Id = toId(row.Id);\r\n\r\n        var sameLetter = this.view.getItems().find(x => x.Id === row.Id);\r\n        if (sameLetter && this.id(sameLetter) !== id) {\r\n            alertDialog('This product is already in order details!');\r\n            return false;\r\n        }\r\n\r\n        id ??= row[this.getIdProperty()];\r\n\r\n\r\n\r\n        return true;\r\n    }\r\n}", "import { LetterAttachmentColumns, LetterAttachmentRow } from \"@/ServerTypes/LetterAttachmentDB\";\r\nimport { Decorators, alertDialog, toId } from \"@serenity-is/corelib\";\r\nimport { GridEditorBase } from \"@serenity-is/extensions\";\r\nimport { LetterAttachmentDialog } from \"./LetterAttachmentDialog\";\r\n\r\n@Decorators.registerEditor('CorrespondenceSystem.LetterAttachmentDB.LetterAttachmentEditor')\r\nexport class LetterAttachmentEditor<P = {}> extends GridEditorBase<LetterAttachmentRow, P> {\r\n    protected getColumnsKey() { return LetterAttachmentColumns.columnsKey; }\r\n    protected getDialogType() { return LetterAttachmentDialog; }\r\n    protected getLocalTextPrefix() { return LetterAttachmentRow.localTextPrefix; }\r\n\r\n//    validateEntity(row, id) {\r\n//        row.ProductID = toId(row.ProductID);\r\n\r\n//        var sameProduct = this.view.getItems().find(x => x.ProductID === row.ProductID);\r\n//        if (sameProduct && this.id(sameProduct) !== id) {\r\n//            alertDialog('This product is already in order details!');\r\n//            return false;\r\n//        }\r\n\r\n//        id ??= row[this.getIdProperty()];\r\n\r\n//        ProductRow.getLookupAsync().then(lookup => {\r\n//            var item = this.view?.getItemById?.(id);\r\n//            if (item) {\r\n//                item.ProductName = lookup.itemById[row.ProductID].ProductName;\r\n//                this.view.updateItem(id, item);\r\n//            }\r\n//        });\r\n\r\n//        row.LineTotal = (row.Quantity || 0) * (row.UnitPrice || 0) - (row.Discount || 0);\r\n//        return true;\r\n//    }\r\n}", "import { RelatedLettersColumns, RelatedLettersRow } from \"@/ServerTypes/RelatedLettersDB\";\r\nimport { Decorators } from \"@serenity-is/corelib\";\r\nimport { GridEditorBase } from \"@serenity-is/extensions\";\r\nimport { RelatedLettersDialog } from \"./RelatedLettersDialog\";\r\n\r\n@Decorators.registerEditor('CorrespondenceSystem.RelatedLettersDB.RelatedLettersEditor')\r\nexport class RelatedLettersEditor<P = {}> extends GridEditorBase<RelatedLettersRow, P> {\r\n    protected getColumnsKey() { return RelatedLettersColumns.columnsKey; }\r\n    protected getDialogType() { return RelatedLettersDialog; }\r\n    protected getLocalTextPrefix() { return RelatedLettersRow.localTextPrefix; }\r\n\r\n}", "import { Decorators, alertDialog, toId, tryFirst, serviceCall, resolveUrl, EditorUtils } from \"@serenity-is/corelib\";\r\nimport { GridEditorBase, } from \"@serenity-is/extensions\";\r\nimport { LetterDialog } from \"../../LetterDB/Letter/LetterDialog\";\r\nimport { SignLettersColumns, SignLettersRow } from \"../../ServerTypes/SignLettersDB\";\r\nimport { SignLettersDialog } from \"./SignLettersDialog\";\r\n\r\n@Decorators.registerEditor('CorrespondenceSystem.SignLettersDB.SignLettersEditor')\r\n\r\n\r\nexport class SignLettersEditor<P = {}> extends GridEditorBase<SignLettersRow, P> {\r\n    protected getColumnsKey() { return SignLettersColumns.columnsKey; }\r\n    protected getDialogType() { return SignLettersDialog; }\r\n    protected getLocalTextPrefix() { return SignLettersRow.localTextPrefix; }\r\n\r\n\r\n    AddSign() {\r\n        serviceCall(\r\n            {\r\n                url: resolveUrl(\"~/Services/SignLettersDB/SignLetters/AddSignLetter\"),\r\n                onSuccess: (response: any) => {\r\n                    var items = this.view.getItems()\r\n\r\n                    const newItem: SignLettersRow  = {\r\n                        SignTitle: response['Title'],\r\n                        SignId: response['Id'],\r\n                        CreatedDate: response['CreatedDate']\r\n                    };\r\n\r\n                    var id = this.id(newItem)\r\n                    if (id == null) {\r\n                        (newItem as any)[this.getIdProperty()] = this.getNextId()\r\n                    }\r\n\r\n                    items.push(newItem);\r\n                    this.setEntities(items);\r\n\r\n                },\r\n                method : 'post'\r\n            }\r\n        );\r\n    }\r\n\r\n\r\n\r\n    getButtons() {\r\n        var buttons = super.getButtons();\r\n        var addButton = tryFirst(buttons, x => x.cssClass == 'add-button');\r\n\r\n        // Check if the button is found\r\n        if (addButton) {\r\n            // Disable the button after the first click\r\n            let isButtonClickable = true;\r\n\r\n            addButton.onClick = (e) => {\r\n                if (isButtonClickable) {\r\n                    // Call your AddSign method\r\n                    this.AddSign();\r\n\r\n                    // Disable the button\r\n                    isButtonClickable = false;\r\n\r\n                    // Optionally, you can update the button appearance or do other actions\r\n                    addButton.disabled = true;\r\n                }\r\n            };\r\n        }\r\n\r\n        return buttons;\r\n    }\r\n\r\n\r\n    //getButtons(){\r\n    //    var s = super.getButtons();\r\n    //    var btn = tryFirst(s, x => x.cssClass == 'add-button');\r\n    //    btn.onClick = null;\r\n    //    btn.onClick = e => this.AddSign()\r\n    //    return s;\r\n    //}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n}", "\uFEFFimport { TaskDescriptionEditor } from \"@/CounterpartDB/Counterpart/CounterpartEditor\";\r\nimport { LetterAttachmentEditor } from \"@/LetterAttachmentDB/LetterAttachment/LetterAttachmentEditor\";\r\nimport { RelatedLettersEditor } from \"@/RelatedLettersDB/RelatedLetters/RelatedLettersEditor\";\r\nimport { SignLettersEditor } from \"@/SignLettersDB/SignLetters/SignLettersEditor\";\r\nimport { RadioButtonEditor, StringEditor, EnumEditor, ServiceLookupEditor, BooleanEditor, LookupEditor, TextAreaEditor, ImageUploadEditor, PrefixedContext, initFormType } from \"@serenity-is/corelib\";\r\nimport { ConfidentialLevels } from \"../Modules/Enums.Letter.ConfidentialLevels\";\r\nimport { LetterTypes } from \"../Modules/Enums.Letter.LetterTypes\";\r\nimport { PriorityStates } from \"../Modules/Enums.Letter.PriorityStates\";\r\nimport { States } from \"../Modules/Enums.Letter.States\";\r\n\r\nexport interface LetterForm {\r\n    LetterType: RadioButtonEditor;\r\n    Title: StringEditor;\r\n    LetterIdentifier: StringEditor;\r\n    LetterIdentifierGen: StringEditor;\r\n    LetterNo: StringEditor;\r\n    PriorityState: RadioButtonEditor;\r\n    ConfidentialLevel: RadioButtonEditor;\r\n    State: EnumEditor;\r\n    SenderId: ServiceLookupEditor;\r\n    ReceiverId: ServiceLookupEditor;\r\n    GrandSubjectId: ServiceLookupEditor;\r\n    UseDefaultTemplate: BooleanEditor;\r\n    TemplateId: LookupEditor;\r\n    LetterContent: TextAreaEditor;\r\n    Tag: StringEditor;\r\n    LetterCarrier: StringEditor;\r\n    HasAttachment: BooleanEditor;\r\n    NeedAnswer: BooleanEditor;\r\n    DetailList: LetterAttachmentEditor;\r\n    SignLettersDetailList: SignLettersEditor;\r\n    LetterFile: ImageUploadEditor;\r\n    CounterpartDetailList: TaskDescriptionEditor;\r\n    RelatedLetterDetailList: RelatedLettersEditor;\r\n}\r\n\r\nexport class LetterForm extends PrefixedContext {\r\n    static readonly formKey = 'LetterDB.Letter';\r\n    private static init: boolean;\r\n\r\n    constructor(prefix: string) {\r\n        super(prefix);\r\n\r\n        if (!LetterForm.init)  {\r\n            LetterForm.init = true;\r\n\r\n            var w0 = RadioButtonEditor;\r\n            var w1 = StringEditor;\r\n            var w2 = EnumEditor;\r\n            var w3 = ServiceLookupEditor;\r\n            var w4 = BooleanEditor;\r\n            var w5 = LookupEditor;\r\n            var w6 = TextAreaEditor;\r\n            var w7 = LetterAttachmentEditor;\r\n            var w8 = SignLettersEditor;\r\n            var w9 = ImageUploadEditor;\r\n            var w10 = TaskDescriptionEditor;\r\n            var w11 = RelatedLettersEditor;\r\n\r\n            initFormType(LetterForm, [\r\n                'LetterType', w0,\r\n                'Title', w1,\r\n                'LetterIdentifier', w1,\r\n                'LetterIdentifierGen', w1,\r\n                'LetterNo', w1,\r\n                'PriorityState', w0,\r\n                'ConfidentialLevel', w0,\r\n                'State', w2,\r\n                'SenderId', w3,\r\n                'ReceiverId', w3,\r\n                'GrandSubjectId', w3,\r\n                'UseDefaultTemplate', w4,\r\n                'TemplateId', w5,\r\n                'LetterContent', w6,\r\n                'Tag', w1,\r\n                'LetterCarrier', w1,\r\n                'HasAttachment', w4,\r\n                'NeedAnswer', w4,\r\n                'DetailList', w7,\r\n                'SignLettersDetailList', w8,\r\n                'LetterFile', w9,\r\n                'CounterpartDetailList', w10,\r\n                'RelatedLetterDetailList', w11\r\n            ]);\r\n        }\r\n    }\r\n}\r\n\r\n[LetterTypes, PriorityStates, ConfidentialLevels, States]; // referenced types", "\uFEFFimport { Decorators } from \"@serenity-is/corelib\";\r\n\r\nexport enum ConfidentialLevels {\r\n    Normal = 0,\r\n    Secret = 1\r\n}\r\nDecorators.registerEnumType(ConfidentialLevels, 'CorrespondenceSystem.Modules.Enums.Letter.ConfidentialLevels', 'ConfidentialLevels');", "\uFEFFimport { Decorators } from \"@serenity-is/corelib\";\n\nexport enum LetterTypes {\n    Outgoing = 0,\n    Incoming = 1,\n    Proceedings = 2\n}\nDecorators.registerEnumType(LetterTypes, 'CorrespondenceSystem.Modules.Enums.Letter.LetterTypes', 'LetterTypes');", "\uFEFFimport { Decorators } from \"@serenity-is/corelib\";\r\n\r\nexport enum PriorityStates {\r\n    Urgent = 0,\r\n    Instant = 1,\r\n    Normal = 2\r\n}\r\nDecorators.registerEnumType(PriorityStates, 'CorrespondenceSystem.Modules.Enums.Letter.PriorityStates', 'PriorityState');", "\uFEFFimport { fieldsProxy } from \"@serenity-is/corelib\";\r\nimport { CounterpartRow } from \"../CounterpartDB/CounterpartRow\";\r\nimport { LetterAttachmentRow } from \"../LetterAttachmentDB/LetterAttachmentRow\";\r\nimport { RelatedLettersRow } from \"../RelatedLettersDB/RelatedLettersRow\";\r\nimport { SignLettersRow } from \"../SignLettersDB/SignLettersRow\";\r\n\r\nexport interface LetterRow {\r\n    Id?: string;\r\n    UseDefaultTemplate?: boolean;\r\n    TemplateId?: string;\r\n    SenderId?: string;\r\n    ReceiverId?: string;\r\n    GrandSubjectId?: string;\r\n    LetterIdentifier?: string;\r\n    LetterIdentifierGen?: string;\r\n    LetterNo?: string;\r\n    Title?: string;\r\n    LetterContent?: string;\r\n    Tag?: string;\r\n    LetterType?: number;\r\n    State?: number;\r\n    PriorityState?: number;\r\n    ConfidentialLevel?: number;\r\n    HasAttachment?: boolean;\r\n    CreatedDate?: string;\r\n    CreatorUserName?: string;\r\n    ModifiedDate?: string;\r\n    ModifiedUserName?: string;\r\n    LetterCarrier?: string;\r\n    NeedAnswer?: boolean;\r\n    LetterFile?: string;\r\n    TemplateTitle?: string;\r\n    SenderName?: string;\r\n    ReceiverName?: string;\r\n    GrandSubjectTitle?: string;\r\n    IsActive?: number;\r\n    DetailList?: LetterAttachmentRow[];\r\n    SignLettersDetailList?: SignLettersRow[];\r\n    CounterpartDetailList?: CounterpartRow[];\r\n    RelatedLetterDetailList?: RelatedLettersRow[];\r\n}\r\n\r\nexport abstract class LetterRow {\r\n    static readonly idProperty = 'Id';\r\n    static readonly isActiveProperty = 'IsActive';\r\n    static readonly nameProperty = 'LetterIdentifier';\r\n    static readonly localTextPrefix = 'LetterDB.Letter';\r\n    static readonly deletePermission = 'Administration:General';\r\n    static readonly insertPermission = 'Administration:General';\r\n    static readonly readPermission = 'Administration:General';\r\n    static readonly updatePermission = 'Administration:General';\r\n\r\n    static readonly Fields = fieldsProxy<LetterRow>();\r\n}", "\uFEFFimport { SaveRequest, SaveResponse, ServiceOptions, DeleteRequest, DeleteResponse, RetrieveRequest, RetrieveResponse, ListRequest, ListResponse, ServiceRequest, serviceRequest } from \"@serenity-is/corelib\";\r\nimport { identifiregenViewModel } from \"../Modules/LetterDB.DTO.identifiregenViewModel\";\r\nimport { LetterRow } from \"./LetterRow\";\r\n\r\nexport namespace LetterService {\r\n    export const baseUrl = 'LetterDB/Letter';\r\n\r\n    export declare function Create(request: SaveRequest<LetterRow>, onSuccess?: (response: SaveResponse) => void, opt?: ServiceOptions<any>): JQueryXHR;\r\n    export declare function Update(request: SaveRequest<LetterRow>, onSuccess?: (response: SaveResponse) => void, opt?: ServiceOptions<any>): JQueryXHR;\r\n    export declare function Delete(request: DeleteRequest, onSuccess?: (response: DeleteResponse) => void, opt?: ServiceOptions<any>): JQueryXHR;\r\n    export declare function Retrieve(request: RetrieveRequest, onSuccess?: (response: RetrieveResponse<LetterRow>) => void, opt?: ServiceOptions<any>): JQueryXHR;\r\n    export declare function List(request: ListRequest, onSuccess?: (response: ListResponse<LetterRow>) => void, opt?: ServiceOptions<any>): JQueryXHR;\r\n    export declare function SetDefaultRecriverSender(request: ServiceRequest, onSuccess?: (response: string) => void, opt?: ServiceOptions<any>): JQueryXHR;\r\n    export declare function SetDefaultTemplate(request: ServiceRequest, onSuccess?: (response: string) => void, opt?: ServiceOptions<any>): JQueryXHR;\r\n    export declare function SetDefaultIdentifireGen(request: ServiceRequest, onSuccess?: (response: identifiregenViewModel) => void, opt?: ServiceOptions<any>): JQueryXHR;\r\n\r\n    export const Methods = {\r\n        Create: \"LetterDB/Letter/Create\",\r\n        Update: \"LetterDB/Letter/Update\",\r\n        Delete: \"LetterDB/Letter/Delete\",\r\n        Retrieve: \"LetterDB/Letter/Retrieve\",\r\n        List: \"LetterDB/Letter/List\",\r\n        SetDefaultRecriverSender: \"LetterDB/Letter/SetDefaultRecriverSender\",\r\n        SetDefaultTemplate: \"LetterDB/Letter/SetDefaultTemplate\",\r\n        SetDefaultIdentifireGen: \"LetterDB/Letter/SetDefaultIdentifireGen\"\r\n    } as const;\r\n\r\n    [\r\n        'Create', \r\n        'Update', \r\n        'Delete', \r\n        'Retrieve', \r\n        'List', \r\n        'SetDefaultRecriverSender', \r\n        'SetDefaultTemplate', \r\n        'SetDefaultIdentifireGen'\r\n    ].forEach(x => {\r\n        (<any>LetterService)[x] = function (r, s, o) {\r\n            return serviceRequest(baseUrl + '/' + x, r, s, o);\r\n        };\r\n    });\r\n}", "import { LetterForm, LetterRow, LetterService } from '@/ServerTypes/LetterDB';\r\nimport { Decorators, EntityDialog, resolveUrl, serviceCall, EditorUtils, notifyError, tryFirst, indexOf, postToService } from '@serenity-is/corelib';\r\nimport { LetterAttachmentRow } from '../../ServerTypes/LetterAttachmentDB';\r\nimport { LetterTypes, States } from '../../ServerTypes/Modules';\r\nimport { GridEditorDialog } from '@serenity-is/extensions'\r\n@Decorators.registerClass('CorrespondenceSystem.LetterDB.LetterDialog')\r\nexport class LetterDialog extends EntityDialog<LetterRow, any> {\r\n    protected getFormKey() { return LetterForm.formKey; }\r\n    protected getRowDefinition() { return LetterRow; }\r\n    protected getService() { return LetterService.baseUrl; }\r\n\r\n    protected form = new LetterForm(this.idPrefix);\r\n\r\n    //constructor(container: JQuery) {\r\n    //    super(container);\r\n    //    this.SetDefaultSender()\r\n    //}\r\n\r\n\r\n    protected reportKey: string;\r\n\r\n    executeReport(targetFrame: string, exportType: string): void {\r\n        if (!this.validateForm()) {\r\n            return;\r\n        }\r\n        var parameters = new Object();\r\n        this.propertyGrid.save(parameters);\r\n        postToService({\r\n            service: 'Report/Execute',\r\n            request: {\r\n                ReportKey: this.reportKey,\r\n                DesignId: 'Default',\r\n                ExportType: exportType,\r\n                Parameters: parameters\r\n            }, target: targetFrame\r\n        });\r\n\r\n    }\r\n\r\n\r\n    protected getToolbarButtons() {\r\n        var buttons = super.getToolbarButtons();\r\n\r\n        buttons.splice(indexOf(buttons, x => x.cssClass == \"undo-delete-button\"), 1);\r\n        buttons.splice(indexOf(buttons, x => x.cssClass == \"localization-button\"), 1);\r\n        buttons.splice(indexOf(buttons, x => x.cssClass == \"clone-button\"), 1);\r\n        buttons.splice(indexOf(buttons, x => x.cssClass == \"apply-changes-button\"), 1);\r\n\r\n        //buttons.push({\r\n        //    title: 'Word', cssClass: 'export-docx-button', onClick: () => {\r\n        //        this.executeReport('', 'Docx');\r\n        //    }\r\n        //});\r\n\r\n        return buttons;\r\n    }\r\n\r\n\r\n    afterLoadEntity() {\r\n        this.SetRecriverSender()\r\n        this.SetDefaultIdentifireGen();\r\n\r\n        this.form.LetterType.changeSelect2(e => {\r\n            if (this.form.LetterType.value === LetterTypes.Outgoing.toString()) {\r\n                EditorUtils.setValue(this.form.State, States.Draft);            \r\n            }\r\n        });\r\n\r\n        this.form.LetterType.changeSelect2(e => {\r\n            this.SetDefaultTemplate();\r\n        });\n\n        this.form.LetterType.changeSelect2(e => {\n            if (this.form.LetterType.value == LetterTypes.Proceedings.toString()) {\r\n                EditorUtils.setReadonly(this.form.LetterIdentifier.element, true);\n                EditorUtils.setReadonly(this.form.LetterIdentifierGen.element, true);\n                EditorUtils.setReadonly(this.form.LetterNo.element, true);\n                EditorUtils.setReadonly(this.form.ReceiverId.element, true);\n                EditorUtils.setReadonly(this.form.SenderId.element, true);\n                EditorUtils.setReadonly(this.form.TemplateId.element, true);\n                EditorUtils.setReadonly(this.form.LetterContent.element, true);\n                EditorUtils.setReadonly(this.form.Tag.element, true);\n                EditorUtils.setReadonly(this.form.LetterCarrier.element, true);\n                EditorUtils.setReadonly(this.form.State.element, true);\n                EditorUtils.setReadonly(this.form.CounterpartDetailList.element, true);\n                this.HideCounterPart();\n                this.HideRelationLetter();\r\n            } else {\n                EditorUtils.setReadonly(this.form.LetterIdentifier.element, false);\n                EditorUtils.setReadonly(this.form.LetterIdentifierGen.element, false);\n                EditorUtils.setReadonly(this.form.LetterNo.element, false);\n                EditorUtils.setReadonly(this.form.ReceiverId.element, false);\n                EditorUtils.setReadonly(this.form.SenderId.element, false);\n                EditorUtils.setReadonly(this.form.TemplateId.element, false);\n                EditorUtils.setReadonly(this.form.LetterContent.element, false);\n                EditorUtils.setReadonly(this.form.Tag.element, false);\n                EditorUtils.setReadonly(this.form.LetterCarrier.element, false);\n                EditorUtils.setReadonly(this.form.State.element, false);\n                EditorUtils.setReadonly(this.form.CounterpartDetailList.element, false);\r\n            }\r\n        });\r\n        \r\n    }\n\n    HideCounterPart() {\r\n        if (this.form.LetterType.value == LetterTypes.Proceedings.toString()) {\r\n            this.hideEditorTab(this.form.CounterpartDetailList.getGridField(), true, true)\r\n\r\n        }\r\n        this.form.LetterType.changeSelect2(e => {\r\n            if (this.form.LetterType.value == LetterTypes.Proceedings.toString()) {\r\n                this.hideEditorTab(this.form.CounterpartDetailList.getGridField(), true, true)\r\n\r\n            }\r\n            else {\r\n                this.hideEditorTab(this.form.CounterpartDetailList.getGridField(), true, false)\r\n            }\r\n\r\n\r\n        })\r\n    }\n\n    HideRelationLetter() {\r\n        if (this.form.LetterType.value == LetterTypes.Proceedings.toString()) {\r\n            this.hideEditorTab(this.form.RelatedLetterDetailList.getGridField(), true, true)\r\n\r\n        }\r\n        this.form.LetterType.changeSelect2(e => {\r\n            if (this.form.LetterType.value == LetterTypes.Proceedings.toString()) {\r\n                this.hideEditorTab(this.form.RelatedLetterDetailList.getGridField(), true, true)\r\n\r\n            }\r\n            else {\r\n                this.hideEditorTab(this.form.RelatedLetterDetailList.getGridField(), true, false)\r\n            }\r\n\r\n\r\n        })\r\n    }\n\r\n\r\n    validateBeforeSave() {\r\n        if (this.form.HasAttachment.value && this.form.DetailList.value.length == 0) {\r\n            notifyError(\"Attach file!!!\");\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n\r\n\r\n    SetRecriverSender() {\r\n        serviceCall({\r\n            url: resolveUrl(\"~/Services/LetterDB/Letter/SetDefaultRecriverSender\"),\r\n            onSuccess: (response: any) => {\r\n                if (response) {\r\n                    this.form.LetterType.changeSelect2(e => {\r\n                        if (this.form.LetterType.value == LetterTypes.Incoming.toString()) {\r\n\r\n                            EditorUtils.setValue(this.form.ReceiverId, response);\r\n                            EditorUtils.setReadonly(this.form.ReceiverId.element,true);\r\n                            EditorUtils.setValue(this.form.SenderId, null);\r\n                            EditorUtils.setReadonly(this.form.SenderId.element, false);\r\n                        }\r\n\r\n                        if (this.form.LetterType.value == LetterTypes.Outgoing.toString()) {\r\n                            var id = this.SetRecriverSender();\r\n\r\n                            EditorUtils.setValue(this.form.SenderId, response);\r\n                            EditorUtils.setReadonly(this.form.SenderId.element, true);\r\n                            EditorUtils.setValue(this.form.ReceiverId, null);\r\n                            EditorUtils.setReadonly(this.form.ReceiverId.element, false);\r\n                        }\r\n                    });\r\n\r\n                } else {\r\n                    console.error('Invalid response format for SetDefaultRecriverSender');\r\n                }\r\n            },\r\n            method: 'post'\r\n        });\r\n    }\r\n\r\n\r\n    SetDefaultTemplate() {\r\n        serviceCall({\r\n            url: resolveUrl(\"~/Services/LetterDB/Letter/SetDefaultTemplate\"),\r\n            onSuccess: (response: any) => {\r\n\r\n                if (this.form.LetterType.value === LetterTypes.Outgoing.toString()) {\r\n                    EditorUtils.setValue(this.form.UseDefaultTemplate, true);\r\n                    EditorUtils.setValue(this.form.TemplateId, response);\r\n                    EditorUtils.setReadonly(this.form.TemplateId.element, true);\r\n                } else {\r\n                    EditorUtils.setValue(this.form.UseDefaultTemplate, false);\r\n                    EditorUtils.setValue(this.form.TemplateId, null);\r\n                    EditorUtils.setReadonly(this.form.TemplateId.element, false);\r\n                }\r\n\r\n                 \r\n                \r\n            },\r\n            method: 'post'\r\n        });\r\n    }\r\n\r\n    SetDefaultIdentifireGen() {\r\n        serviceCall({\r\n            url: resolveUrl(\"~/Services/LetterDB/Letter/SetDefaultIdentifireGen\"),\r\n            onSuccess: (response: any) => {\r\n                if (response) {\r\n                    this.form.LetterType.changeSelect2(e => {\r\n                        if (this.form.LetterType.value == LetterTypes.Outgoing.toString()) {\r\n\r\n                            EditorUtils.setValue(this.form.LetterIdentifierGen, response.Identifier);\r\n                            EditorUtils.setReadonly(this.form.LetterIdentifierGen.element, true);\r\n                        }\r\n\r\n                        if (this.form.LetterType.value == LetterTypes.Incoming.toString()) {\r\n                            var id = this.SetRecriverSender();\r\n\r\n                            EditorUtils.setValue(this.form.LetterIdentifierGen, null);\r\n                            EditorUtils.setReadonly(this.form.LetterIdentifierGen.element, false);\r\n\r\n\r\n                        }\r\n                    });\r\n\r\n                } else {\r\n                    console.error('Invalid response format for SetDefaultRecriverSender');\r\n                }\r\n            },\r\n            method: 'post'\r\n        });\r\n    }\r\n\r\n    hideEditorTab(editor: any, value: boolean = true, flag) {\r\n\r\n        if (flag == true) {\r\n\r\n            let tabId = editor.closest('.tab-pane').hide().attr('id');\r\n\r\n            let tabAnchor = editor.closest('.s-PropertyGrid').find(`a[href='#${tabId}']`);\r\n\r\n            tabAnchor.closest('li').hide();\r\n        } else {\r\n\r\n            let tabId = editor.closest('.tab-pane').hide().attr('id');\r\n\r\n\r\n            let tabAnchor = editor.closest('.s-PropertyGrid').find(`a[href='#${tabId}']`);\r\n\r\n\r\n            tabAnchor.closest('li').show();\r\n\r\n            editor.closest('.tab-pane').removeAttr('style');\r\n\r\n        }\r\n    }\r\n\r\n\r\n    \r\n}", "import { LetterColumns, LetterRow, LetterService } from '@/ServerTypes/LetterDB';\r\nimport { Column } from '@serenity-is/sleekgrid';\r\nimport { LetterDialog } from './LetterDialog';\r\nimport { Decorators, EditorUtils, EntityGrid, resolveUrl, serviceCall, ToolButton, tryFirst, Criteria } from '@serenity-is/corelib';\r\n\r\n\r\n@Decorators.registerClass('CorrespondenceSystem.LetterDB.LetterGrid')\r\nexport class LetterGrid extends EntityGrid<LetterRow, any> {\r\n    protected getColumnsKey() { return LetterColumns.columnsKey; }\r\n    protected getDialogType() { return LetterDialog; }\r\n    protected getRowDefinition() { return LetterRow; }\r\n    protected getService() { return LetterService.baseUrl; }\r\n\r\n    constructor(container: JQuery) {\r\n        super(container);\r\n    }\r\n\r\n\r\n\r\n\r\n    getColumns() {\r\n        var columns = super.getColumns();\r\n\r\n        // Add the \"Download letter\" column\r\n        let downloadLetterColumn: Column<LetterRow> = {\r\n            name: \"\u062F\u0627\u0646\u0644\u0648\u062F \u0646\u0627\u0645\u0647\",\r\n            width: 120,\r\n            format: ctx => `<a class=\"fa fa-download downloaded\" style=\"display: flex; align-items: center; justify-content: center;\"></a>`,\r\n            minWidth: 120,\r\n            maxWidth: 120,\r\n            cssClass: 'download'     \r\n        };\r\n\r\n        columns.push(downloadLetterColumn);\r\n\r\n        //const downloadLetterIndex = columns.lastIndexOf(downloadLetterColumn);\r\n\r\n        return columns;\r\n    }\r\n\r\n    protected onClick(e: JQueryEventObject, row: number, cell: number) {\r\n        super.onClick(e, row, cell);\r\n\r\n        let item = this.itemAt(row);\r\n\r\n        // Check if the clicked element has the \"download\" class\r\n        if ($(e.target).hasClass(\"download\")) {\r\n            e.preventDefault();\r\n            this.DownloadWord(item.Id);\r\n        }\r\n    }\r\n\r\n\r\n    DownloadWord(Id) {\r\n        serviceCall({\r\n            url: resolveUrl(\"~/Services/LetterDB/Letter/DownloadWordLetter\"),\r\n            data: JSON.stringify({ Id: Id }),  // Serialize the data to JSON\r\n            contentType: 'application/json',    // Set content type to JSON\r\n            onSuccess: (response: any) => {\r\n                return response;\r\n            },\r\n            method: 'post'\r\n        });\r\n    }\r\n\r\n    getQuickFilters() {\r\n\r\n        let filter = super.getQuickFilters();\r\n        let tag = tryFirst(filter, x => x.field == LetterRow.Fields.Tag)\r\n\r\n\r\n        tag.handler = h => {\r\n            //h.active = !!h.value;\r\n            if (h.active) {\r\n\r\n                h.request.Criteria = Criteria.and(h.request.Criteria,\r\n                    [[LetterRow.Fields.Tag], 'like', \"%\" + h.value + \"%\"])\r\n            }\r\n        }\r\n\r\n\r\n        return filter;\r\n    }\r\n\r\n\r\n}"],
  "mappings": "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",
  "names": ["import_corelib", "import_corelib", "import_corelib", "States", "_LetterColumns", "__name", "LetterColumns", "import_corelib", "import_extensions", "TaskDescriptionEditor", "CounterpartColumns", "CounterpartDialog", "CounterpartRow", "row", "id", "sameLetter", "x", "__name", "__decorateClass", "import_corelib", "import_extensions", "LetterAttachmentEditor", "LetterAttachmentColumns", "LetterAttachmentDialog", "LetterAttachmentRow", "__name", "__decorateClass", "import_corelib", "import_extensions", "RelatedLettersEditor", "RelatedLettersColumns", "RelatedLettersDialog", "RelatedLettersRow", "__name", "__decorateClass", "import_corelib", "import_extensions", "SignLettersEditor", "SignLettersColumns", "SignLettersDialog", "SignLettersRow", "response", "items", "newItem", "id", "buttons", "addButton", "x", "isButtonClickable", "e", "__name", "__decorateClass", "import_corelib", "import_corelib", "ConfidentialLevels", "import_corelib", "LetterTypes", "import_corelib", "PriorityStates", "_LetterForm", "prefix", "w0", "w1", "w2", "w3", "w4", "w5", "w6", "w7", "LetterAttachmentEditor", "w8", "SignLettersEditor", "w9", "w10", "TaskDescriptionEditor", "w11", "RelatedLettersEditor", "__name", "LetterForm", "import_corelib", "_LetterRow", "__name", "LetterRow", "import_corelib", "LetterService", "x", "r", "s", "o", "import_corelib", "LetterDialog", "LetterForm", "LetterRow", "LetterService", "targetFrame", "exportType", "parameters", "buttons", "x", "response", "e", "id", "editor", "value", "flag", "tabId", "__name", "__decorateClass", "import_corelib", "LetterGrid", "LetterColumns", "LetterDialog", "LetterRow", "LetterService", "container", "columns", "downloadLetterColumn", "ctx", "e", "row", "cell", "item", "Id", "response", "filter", "tag", "x", "h", "__name", "__decorateClass", "pageInit", "LetterGrid", "__name"]
}
